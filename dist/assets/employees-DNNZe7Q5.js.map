{"version":3,"file":"employees-DNNZe7Q5.js","sources":["../../node_modules/@firebase/installations/dist/esm/index.esm.js","../../node_modules/@firebase/analytics/dist/esm/index.esm.js","../../src/config/firebase.ts","../../src/services/firestore/employees.ts"],"sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\nconst name = \"@firebase/installations\";\nconst version = \"0.6.19\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PENDING_TIMEOUT_MS = 10000;\nconst PACKAGE_VERSION = `w:${version}`;\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\nconst SERVICE = 'installations';\nconst SERVICE_NAME = 'Installations';\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ERROR_DESCRIPTION_MAP = {\n    [\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\n    [\"not-registered\" /* ErrorCode.NOT_REGISTERED */]: 'Firebase Installation is not registered.',\n    [\"installation-not-found\" /* ErrorCode.INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',\n    [\"request-failed\" /* ErrorCode.REQUEST_FAILED */]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n    [\"app-offline\" /* ErrorCode.APP_OFFLINE */]: 'Could not process request. Application offline.',\n    [\"delete-pending-registration\" /* ErrorCode.DELETE_PENDING_REGISTRATION */]: \"Can't delete installation while there is a pending registration request.\"\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nfunction isServerError(error) {\n    return (error instanceof FirebaseError &&\n        error.code.includes(\"request-failed\" /* ErrorCode.REQUEST_FAILED */));\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction getInstallationsEndpoint({ projectId }) {\n    return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\nfunction extractAuthTokenInfoFromResponse(response) {\n    return {\n        token: response.token,\n        requestStatus: 2 /* RequestStatus.COMPLETED */,\n        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n        creationTime: Date.now()\n    };\n}\nasync function getErrorFromResponse(requestName, response) {\n    const responseJson = await response.json();\n    const errorData = responseJson.error;\n    return ERROR_FACTORY.create(\"request-failed\" /* ErrorCode.REQUEST_FAILED */, {\n        requestName,\n        serverCode: errorData.code,\n        serverMessage: errorData.message,\n        serverStatus: errorData.status\n    });\n}\nfunction getHeaders({ apiKey }) {\n    return new Headers({\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'x-goog-api-key': apiKey\n    });\n}\nfunction getHeadersWithAuth(appConfig, { refreshToken }) {\n    const headers = getHeaders(appConfig);\n    headers.append('Authorization', getAuthorizationHeader(refreshToken));\n    return headers;\n}\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nasync function retryIfServerError(fn) {\n    const result = await fn();\n    if (result.status >= 500 && result.status < 600) {\n        // Internal Server Error. Retry request.\n        return fn();\n    }\n    return result;\n}\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n    // This works because the server will never respond with fractions of a second.\n    return Number(responseExpiresIn.replace('s', '000'));\n}\nfunction getAuthorizationHeader(refreshToken) {\n    return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function createInstallationRequest({ appConfig, heartbeatServiceProvider }, { fid }) {\n    const endpoint = getInstallationsEndpoint(appConfig);\n    const headers = getHeaders(appConfig);\n    // If heartbeat service exists, add the heartbeat string to the header.\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\n        optional: true\n    });\n    if (heartbeatService) {\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n        if (heartbeatsHeader) {\n            headers.append('x-firebase-client', heartbeatsHeader);\n        }\n    }\n    const body = {\n        fid,\n        authVersion: INTERNAL_AUTH_VERSION,\n        appId: appConfig.appId,\n        sdkVersion: PACKAGE_VERSION\n    };\n    const request = {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(body)\n    };\n    const response = await retryIfServerError(() => fetch(endpoint, request));\n    if (response.ok) {\n        const responseValue = await response.json();\n        const registeredInstallationEntry = {\n            fid: responseValue.fid || fid,\n            registrationStatus: 2 /* RequestStatus.COMPLETED */,\n            refreshToken: responseValue.refreshToken,\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n        };\n        return registeredInstallationEntry;\n    }\n    else {\n        throw await getErrorFromResponse('Create Installation', response);\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Returns a promise that resolves after given time passes. */\nfunction sleep(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction bufferToBase64UrlSafe(array) {\n    const b64 = btoa(String.fromCharCode(...array));\n    return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nconst INVALID_FID = '';\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nfunction generateFid() {\n    try {\n        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n        // bytes. our implementation generates a 17 byte array instead.\n        const fidByteArray = new Uint8Array(17);\n        const crypto = self.crypto || self.msCrypto;\n        crypto.getRandomValues(fidByteArray);\n        // Replace the first 4 random bits with the constant FID header of 0b0111.\n        fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n        const fid = encode(fidByteArray);\n        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n    }\n    catch {\n        // FID generation errored\n        return INVALID_FID;\n    }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray) {\n    const b64String = bufferToBase64UrlSafe(fidByteArray);\n    // Remove the 23rd character that was added because of the extra 4 bits at the\n    // end of our 17 byte array, and the '=' padding.\n    return b64String.substr(0, 22);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Returns a string key that can be used to identify the app. */\nfunction getKey(appConfig) {\n    return `${appConfig.appName}!${appConfig.appId}`;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst fidChangeCallbacks = new Map();\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nfunction fidChanged(appConfig, fid) {\n    const key = getKey(appConfig);\n    callFidChangeCallbacks(key, fid);\n    broadcastFidChange(key, fid);\n}\nfunction addCallback(appConfig, callback) {\n    // Open the broadcast channel if it's not already open,\n    // to be able to listen to change events from other tabs.\n    getBroadcastChannel();\n    const key = getKey(appConfig);\n    let callbackSet = fidChangeCallbacks.get(key);\n    if (!callbackSet) {\n        callbackSet = new Set();\n        fidChangeCallbacks.set(key, callbackSet);\n    }\n    callbackSet.add(callback);\n}\nfunction removeCallback(appConfig, callback) {\n    const key = getKey(appConfig);\n    const callbackSet = fidChangeCallbacks.get(key);\n    if (!callbackSet) {\n        return;\n    }\n    callbackSet.delete(callback);\n    if (callbackSet.size === 0) {\n        fidChangeCallbacks.delete(key);\n    }\n    // Close broadcast channel if there are no more callbacks.\n    closeBroadcastChannel();\n}\nfunction callFidChangeCallbacks(key, fid) {\n    const callbacks = fidChangeCallbacks.get(key);\n    if (!callbacks) {\n        return;\n    }\n    for (const callback of callbacks) {\n        callback(fid);\n    }\n}\nfunction broadcastFidChange(key, fid) {\n    const channel = getBroadcastChannel();\n    if (channel) {\n        channel.postMessage({ key, fid });\n    }\n    closeBroadcastChannel();\n}\nlet broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel() {\n    if (!broadcastChannel && 'BroadcastChannel' in self) {\n        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n        broadcastChannel.onmessage = e => {\n            callFidChangeCallbacks(e.data.key, e.data.fid);\n        };\n    }\n    return broadcastChannel;\n}\nfunction closeBroadcastChannel() {\n    if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n        broadcastChannel.close();\n        broadcastChannel = null;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\nlet dbPromise = null;\nfunction getDbPromise() {\n    if (!dbPromise) {\n        dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n            upgrade: (db, oldVersion) => {\n                // We don't use 'break' in this switch statement, the fall-through\n                // behavior is what we want, because if there are multiple versions between\n                // the old version and the current version, we want ALL the migrations\n                // that correspond to those versions to run, not only the last one.\n                // eslint-disable-next-line default-case\n                switch (oldVersion) {\n                    case 0:\n                        db.createObjectStore(OBJECT_STORE_NAME);\n                }\n            }\n        });\n    }\n    return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\nasync function set(appConfig, value) {\n    const key = getKey(appConfig);\n    const db = await getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n    const oldValue = (await objectStore.get(key));\n    await objectStore.put(value, key);\n    await tx.done;\n    if (!oldValue || oldValue.fid !== value.fid) {\n        fidChanged(appConfig, value.fid);\n    }\n    return value;\n}\n/** Removes record(s) from the objectStore that match the given key. */\nasync function remove(appConfig) {\n    const key = getKey(appConfig);\n    const db = await getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n    await tx.done;\n}\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nasync function update(appConfig, updateFn) {\n    const key = getKey(appConfig);\n    const db = await getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    const store = tx.objectStore(OBJECT_STORE_NAME);\n    const oldValue = (await store.get(key));\n    const newValue = updateFn(oldValue);\n    if (newValue === undefined) {\n        await store.delete(key);\n    }\n    else {\n        await store.put(newValue, key);\n    }\n    await tx.done;\n    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n        fidChanged(appConfig, newValue.fid);\n    }\n    return newValue;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nasync function getInstallationEntry(installations) {\n    let registrationPromise;\n    const installationEntry = await update(installations.appConfig, oldEntry => {\n        const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n        const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\n        registrationPromise = entryWithPromise.registrationPromise;\n        return entryWithPromise.installationEntry;\n    });\n    if (installationEntry.fid === INVALID_FID) {\n        // FID generation failed. Waiting for the FID from the server.\n        return { installationEntry: await registrationPromise };\n    }\n    return {\n        installationEntry,\n        registrationPromise\n    };\n}\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(oldEntry) {\n    const entry = oldEntry || {\n        fid: generateFid(),\n        registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n    };\n    return clearTimedOutRequest(entry);\n}\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\n    if (installationEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\n        if (!navigator.onLine) {\n            // Registration required but app is offline.\n            const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */));\n            return {\n                installationEntry,\n                registrationPromise: registrationPromiseWithError\n            };\n        }\n        // Try registering. Change status to IN_PROGRESS.\n        const inProgressEntry = {\n            fid: installationEntry.fid,\n            registrationStatus: 1 /* RequestStatus.IN_PROGRESS */,\n            registrationTime: Date.now()\n        };\n        const registrationPromise = registerInstallation(installations, inProgressEntry);\n        return { installationEntry: inProgressEntry, registrationPromise };\n    }\n    else if (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n        return {\n            installationEntry,\n            registrationPromise: waitUntilFidRegistration(installations)\n        };\n    }\n    else {\n        return { installationEntry };\n    }\n}\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(installations, installationEntry) {\n    try {\n        const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\n        return set(installations.appConfig, registeredInstallationEntry);\n    }\n    catch (e) {\n        if (isServerError(e) && e.customData.serverCode === 409) {\n            // Server returned a \"FID cannot be used\" error.\n            // Generate a new ID next time.\n            await remove(installations.appConfig);\n        }\n        else {\n            // Registration failed. Set FID as not registered.\n            await set(installations.appConfig, {\n                fid: installationEntry.fid,\n                registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n            });\n        }\n        throw e;\n    }\n}\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(installations) {\n    // Unfortunately, there is no way of reliably observing when a value in\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n    // so we need to poll.\n    let entry = await updateInstallationRequest(installations.appConfig);\n    while (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n        // createInstallation request still in progress.\n        await sleep(100);\n        entry = await updateInstallationRequest(installations.appConfig);\n    }\n    if (entry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\n        // The request timed out or failed in a different call. Try again.\n        const { installationEntry, registrationPromise } = await getInstallationEntry(installations);\n        if (registrationPromise) {\n            return registrationPromise;\n        }\n        else {\n            // if there is no registrationPromise, entry is registered.\n            return installationEntry;\n        }\n    }\n    return entry;\n}\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(appConfig) {\n    return update(appConfig, oldEntry => {\n        if (!oldEntry) {\n            throw ERROR_FACTORY.create(\"installation-not-found\" /* ErrorCode.INSTALLATION_NOT_FOUND */);\n        }\n        return clearTimedOutRequest(oldEntry);\n    });\n}\nfunction clearTimedOutRequest(entry) {\n    if (hasInstallationRequestTimedOut(entry)) {\n        return {\n            fid: entry.fid,\n            registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n        };\n    }\n    return entry;\n}\nfunction hasInstallationRequestTimedOut(installationEntry) {\n    return (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */ &&\n        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function generateAuthTokenRequest({ appConfig, heartbeatServiceProvider }, installationEntry) {\n    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\n    // If heartbeat service exists, add the heartbeat string to the header.\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\n        optional: true\n    });\n    if (heartbeatService) {\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n        if (heartbeatsHeader) {\n            headers.append('x-firebase-client', heartbeatsHeader);\n        }\n    }\n    const body = {\n        installation: {\n            sdkVersion: PACKAGE_VERSION,\n            appId: appConfig.appId\n        }\n    };\n    const request = {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(body)\n    };\n    const response = await retryIfServerError(() => fetch(endpoint, request));\n    if (response.ok) {\n        const responseValue = await response.json();\n        const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n        return completedAuthToken;\n    }\n    else {\n        throw await getErrorFromResponse('Generate Auth Token', response);\n    }\n}\nfunction getGenerateAuthTokenEndpoint(appConfig, { fid }) {\n    return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nasync function refreshAuthToken(installations, forceRefresh = false) {\n    let tokenPromise;\n    const entry = await update(installations.appConfig, oldEntry => {\n        if (!isEntryRegistered(oldEntry)) {\n            throw ERROR_FACTORY.create(\"not-registered\" /* ErrorCode.NOT_REGISTERED */);\n        }\n        const oldAuthToken = oldEntry.authToken;\n        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n            // There is a valid token in the DB.\n            return oldEntry;\n        }\n        else if (oldAuthToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n            // There already is a token request in progress.\n            tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n            return oldEntry;\n        }\n        else {\n            // No token or token expired.\n            if (!navigator.onLine) {\n                throw ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */);\n            }\n            const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n            tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n            return inProgressEntry;\n        }\n    });\n    const authToken = tokenPromise\n        ? await tokenPromise\n        : entry.authToken;\n    return authToken;\n}\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\n    // Unfortunately, there is no way of reliably observing when a value in\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n    // so we need to poll.\n    let entry = await updateAuthTokenRequest(installations.appConfig);\n    while (entry.authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n        // generateAuthToken still in progress.\n        await sleep(100);\n        entry = await updateAuthTokenRequest(installations.appConfig);\n    }\n    const authToken = entry.authToken;\n    if (authToken.requestStatus === 0 /* RequestStatus.NOT_STARTED */) {\n        // The request timed out or failed in a different call. Try again.\n        return refreshAuthToken(installations, forceRefresh);\n    }\n    else {\n        return authToken;\n    }\n}\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(appConfig) {\n    return update(appConfig, oldEntry => {\n        if (!isEntryRegistered(oldEntry)) {\n            throw ERROR_FACTORY.create(\"not-registered\" /* ErrorCode.NOT_REGISTERED */);\n        }\n        const oldAuthToken = oldEntry.authToken;\n        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n            return {\n                ...oldEntry,\n                authToken: { requestStatus: 0 /* RequestStatus.NOT_STARTED */ }\n            };\n        }\n        return oldEntry;\n    });\n}\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\n    try {\n        const authToken = await generateAuthTokenRequest(installations, installationEntry);\n        const updatedInstallationEntry = {\n            ...installationEntry,\n            authToken\n        };\n        await set(installations.appConfig, updatedInstallationEntry);\n        return authToken;\n    }\n    catch (e) {\n        if (isServerError(e) &&\n            (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\n            // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n            // Generate a new ID next time.\n            await remove(installations.appConfig);\n        }\n        else {\n            const updatedInstallationEntry = {\n                ...installationEntry,\n                authToken: { requestStatus: 0 /* RequestStatus.NOT_STARTED */ }\n            };\n            await set(installations.appConfig, updatedInstallationEntry);\n        }\n        throw e;\n    }\n}\nfunction isEntryRegistered(installationEntry) {\n    return (installationEntry !== undefined &&\n        installationEntry.registrationStatus === 2 /* RequestStatus.COMPLETED */);\n}\nfunction isAuthTokenValid(authToken) {\n    return (authToken.requestStatus === 2 /* RequestStatus.COMPLETED */ &&\n        !isAuthTokenExpired(authToken));\n}\nfunction isAuthTokenExpired(authToken) {\n    const now = Date.now();\n    return (now < authToken.creationTime ||\n        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n    const inProgressAuthToken = {\n        requestStatus: 1 /* RequestStatus.IN_PROGRESS */,\n        requestTime: Date.now()\n    };\n    return {\n        ...oldEntry,\n        authToken: inProgressAuthToken\n    };\n}\nfunction hasAuthTokenRequestTimedOut(authToken) {\n    return (authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */ &&\n        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nasync function getId(installations) {\n    const installationsImpl = installations;\n    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl);\n    if (registrationPromise) {\n        registrationPromise.catch(console.error);\n    }\n    else {\n        // If the installation is already registered, update the authentication\n        // token if needed.\n        refreshAuthToken(installationsImpl).catch(console.error);\n    }\n    return installationEntry.fid;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nasync function getToken(installations, forceRefresh = false) {\n    const installationsImpl = installations;\n    await completeInstallationRegistration(installationsImpl);\n    // At this point we either have a Registered Installation in the DB, or we've\n    // already thrown an error.\n    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n    return authToken.token;\n}\nasync function completeInstallationRegistration(installations) {\n    const { registrationPromise } = await getInstallationEntry(installations);\n    if (registrationPromise) {\n        // A createInstallation request is in progress. Wait until it finishes.\n        await registrationPromise;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function deleteInstallationRequest(appConfig, installationEntry) {\n    const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\n    const request = {\n        method: 'DELETE',\n        headers\n    };\n    const response = await retryIfServerError(() => fetch(endpoint, request));\n    if (!response.ok) {\n        throw await getErrorFromResponse('Delete Installation', response);\n    }\n}\nfunction getDeleteEndpoint(appConfig, { fid }) {\n    return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nasync function deleteInstallations(installations) {\n    const { appConfig } = installations;\n    const entry = await update(appConfig, oldEntry => {\n        if (oldEntry && oldEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\n            // Delete the unregistered entry without sending a deleteInstallation request.\n            return undefined;\n        }\n        return oldEntry;\n    });\n    if (entry) {\n        if (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n            // Can't delete while trying to register.\n            throw ERROR_FACTORY.create(\"delete-pending-registration\" /* ErrorCode.DELETE_PENDING_REGISTRATION */);\n        }\n        else if (entry.registrationStatus === 2 /* RequestStatus.COMPLETED */) {\n            if (!navigator.onLine) {\n                throw ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */);\n            }\n            else {\n                await deleteInstallationRequest(appConfig, entry);\n                await remove(appConfig);\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nfunction onIdChange(installations, callback) {\n    const { appConfig } = installations;\n    addCallback(appConfig, callback);\n    return () => {\n        removeCallback(appConfig, callback);\n    };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nfunction getInstallations(app = getApp()) {\n    const installationsImpl = _getProvider(app, 'installations').getImmediate();\n    return installationsImpl;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction extractAppConfig(app) {\n    if (!app || !app.options) {\n        throw getMissingValueError('App Configuration');\n    }\n    if (!app.name) {\n        throw getMissingValueError('App Name');\n    }\n    // Required app config keys\n    const configKeys = [\n        'projectId',\n        'apiKey',\n        'appId'\n    ];\n    for (const keyName of configKeys) {\n        if (!app.options[keyName]) {\n            throw getMissingValueError(keyName);\n        }\n    }\n    return {\n        appName: app.name,\n        projectId: app.options.projectId,\n        apiKey: app.options.apiKey,\n        appId: app.options.appId\n    };\n}\nfunction getMissingValueError(valueName) {\n    return ERROR_FACTORY.create(\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, {\n        valueName\n    });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\nconst publicFactory = (container) => {\n    const app = container.getProvider('app').getImmediate();\n    // Throws if app isn't configured properly.\n    const appConfig = extractAppConfig(app);\n    const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    const installationsImpl = {\n        app,\n        appConfig,\n        heartbeatServiceProvider,\n        _delete: () => Promise.resolve()\n    };\n    return installationsImpl;\n};\nconst internalFactory = (container) => {\n    const app = container.getProvider('app').getImmediate();\n    // Internal FIS instance relies on public FIS instance.\n    const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n    const installationsInternal = {\n        getId: () => getId(installations),\n        getToken: (forceRefresh) => getToken(installations, forceRefresh)\n    };\n    return installationsInternal;\n};\nfunction registerInstallations() {\n    _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\" /* ComponentType.PUBLIC */));\n    _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\n}\n\n/**\n * The Firebase Installations Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\nregisterVersion(name, version, 'esm2020');\n\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };\n//# sourceMappingURL=index.esm.js.map\n","import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n// Key to attach FID to in gtag params.\nconst GA_FID_KEY = 'firebase_id';\nconst ORIGIN_KEY = 'origin';\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logger = new Logger('@firebase/analytics');\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ERRORS = {\n    [\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' +\n        ' already exists. ' +\n        'Only one Firebase Analytics instance can be created for each appId.',\n    [\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' +\n        'it was initially called with. It can be called again with the same options to ' +\n        'return the existing instance, or getAnalytics() can be used ' +\n        'to get a reference to the already-initialized instance.',\n    [\"already-initialized-settings\" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' +\n        'settings() must be called before initializing any Analytics instance' +\n        'or it will have no effect.',\n    [\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n    [\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' +\n        'Wrap initialization of analytics in analytics.isSupported() ' +\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n    [\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' +\n        'Wrap initialization of analytics in analytics.isSupported() ' +\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n    [\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n    [\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n    [\"no-api-key\" /* AnalyticsError.NO_API_KEY */]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n        'contain a valid API key.',\n    [\"no-app-id\" /* AnalyticsError.NO_APP_ID */]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n        'contain a valid app ID.',\n    [\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */]: 'The \"client_id\" field is empty.',\n    [\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */]: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\n};\nconst ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Verifies and creates a TrustedScriptURL.\n */\nfunction createGtagTrustedTypesScriptURL(url) {\n    if (!url.startsWith(GTAG_URL)) {\n        const err = ERROR_FACTORY.create(\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {\n            gtagURL: url\n        });\n        logger.warn(err.message);\n        return '';\n    }\n    return url;\n}\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nfunction promiseAllSettled(promises) {\n    return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n/**\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\n *\n * @param policyName A string containing the name of the policy\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\n * | the TrustedTypePolicy reference documentation}.\n */\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\n    // Create a TrustedTypes policy that we can use for updating src\n    // properties\n    let trustedTypesPolicy;\n    if (window.trustedTypes) {\n        trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\n    }\n    return trustedTypesPolicy;\n}\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n    const trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\n        createScriptURL: createGtagTrustedTypesScriptURL\n    });\n    const script = document.createElement('script');\n    // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n    // without fid. We will initialize ga-id using gtag (config) command together with fid.\n    const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n    script.src = trustedTypesPolicy\n        ? trustedTypesPolicy?.createScriptURL(gtagScriptURL)\n        : gtagScriptURL;\n    script.async = true;\n    document.head.appendChild(script);\n}\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n    // Check for existing dataLayer and create if needed.\n    let dataLayer = [];\n    if (Array.isArray(window[dataLayerName])) {\n        dataLayer = window[dataLayerName];\n    }\n    else {\n        window[dataLayerName] = dataLayer;\n    }\n    return dataLayer;\n}\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n    // If config is already fetched, we know the appId and can use it to look up what FID promise we\n    /// are waiting for, and wait only on that one.\n    const correspondingAppId = measurementIdToAppId[measurementId];\n    try {\n        if (correspondingAppId) {\n            await initializationPromisesMap[correspondingAppId];\n        }\n        else {\n            // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n            // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n            // that appId's initialization promise. If there is none, promise resolves and gtag\n            // call goes through.\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\n            const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\n            if (foundConfig) {\n                await initializationPromisesMap[foundConfig.appId];\n            }\n        }\n    }\n    catch (e) {\n        logger.error(e);\n    }\n    gtagCore(\"config\" /* GtagCommand.CONFIG */, measurementId, gtagParams);\n}\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n    try {\n        let initializationPromisesToWaitFor = [];\n        // If there's a 'send_to' param, check if any ID specified matches\n        // an initializeIds() promise we are waiting for.\n        if (gtagParams && gtagParams['send_to']) {\n            let gaSendToList = gtagParams['send_to'];\n            // Make it an array if is isn't, so it can be dealt with the same way.\n            if (!Array.isArray(gaSendToList)) {\n                gaSendToList = [gaSendToList];\n            }\n            // Checking 'send_to' fields requires having all measurement ID results back from\n            // the dynamic config fetch.\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\n            for (const sendToId of gaSendToList) {\n                // Any fetched dynamic measurement ID that matches this 'send_to' ID\n                const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\n                const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n                if (initializationPromise) {\n                    initializationPromisesToWaitFor.push(initializationPromise);\n                }\n                else {\n                    // Found an item in 'send_to' that is not associated\n                    // directly with an FID, possibly a group.  Empty this array,\n                    // exit the loop early, and let it get populated below.\n                    initializationPromisesToWaitFor = [];\n                    break;\n                }\n            }\n        }\n        // This will be unpopulated if there was no 'send_to' field , or\n        // if not all entries in the 'send_to' field could be mapped to\n        // a FID. In these cases, wait on all pending initialization promises.\n        if (initializationPromisesToWaitFor.length === 0) {\n            /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n        }\n        // Run core gtag function with args after all relevant initialization\n        // promises have been resolved.\n        await Promise.all(initializationPromisesToWaitFor);\n        // Workaround for http://b/141370449 - third argument cannot be undefined.\n        gtagCore(\"event\" /* GtagCommand.EVENT */, measurementId, gtagParams || {});\n    }\n    catch (e) {\n        logger.error(e);\n    }\n}\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(gtagCore, \n/**\n * Allows wrapped gtag calls to wait on whichever initialization promises are required,\n * depending on the contents of the gtag params' `send_to` field, if any.\n */\ninitializationPromisesMap, \n/**\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n * before determining what initialization promises (which include FIDs) to wait for.\n */\ndynamicConfigPromisesList, \n/**\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n * which is the key for the initialization promises map.\n */\nmeasurementIdToAppId) {\n    /**\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\n     * @param command Gtag command type.\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n     * @param gtagParams Params if event is EVENT/CONFIG.\n     */\n    async function gtagWrapper(command, ...args) {\n        try {\n            // If event, check that relevant initialization promises have completed.\n            if (command === \"event\" /* GtagCommand.EVENT */) {\n                const [measurementId, gtagParams] = args;\n                // If EVENT, second arg must be measurementId.\n                await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);\n            }\n            else if (command === \"config\" /* GtagCommand.CONFIG */) {\n                const [measurementId, gtagParams] = args;\n                // If CONFIG, second arg must be measurementId.\n                await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams);\n            }\n            else if (command === \"consent\" /* GtagCommand.CONSENT */) {\n                const [consentAction, gtagParams] = args;\n                // consentAction can be one of 'default' or 'update'.\n                gtagCore(\"consent\" /* GtagCommand.CONSENT */, consentAction, gtagParams);\n            }\n            else if (command === \"get\" /* GtagCommand.GET */) {\n                const [measurementId, fieldName, callback] = args;\n                gtagCore(\"get\" /* GtagCommand.GET */, measurementId, fieldName, callback);\n            }\n            else if (command === \"set\" /* GtagCommand.SET */) {\n                const [customParams] = args;\n                // If SET, second arg must be params.\n                gtagCore(\"set\" /* GtagCommand.SET */, customParams);\n            }\n            else {\n                gtagCore(command, ...args);\n            }\n        }\n        catch (e) {\n            logger.error(e);\n        }\n    }\n    return gtagWrapper;\n}\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n    // Create a basic core gtag function\n    let gtagCore = function (..._args) {\n        // Must push IArguments object, not an array.\n        window[dataLayerName].push(arguments);\n    };\n    // Replace it with existing one if found\n    if (window[gtagFunctionName] &&\n        typeof window[gtagFunctionName] === 'function') {\n        // @ts-ignore\n        gtagCore = window[gtagFunctionName];\n    }\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n    return {\n        gtagCore,\n        wrappedGtag: window[gtagFunctionName]\n    };\n}\n/**\n * Returns the script tag in the DOM matching both the gtag url pattern\n * and the provided data layer name.\n */\nfunction findGtagScriptOnPage(dataLayerName) {\n    const scriptTags = window.document.getElementsByTagName('script');\n    for (const tag of Object.values(scriptTags)) {\n        if (tag.src &&\n            tag.src.includes(GTAG_URL) &&\n            tag.src.includes(dataLayerName)) {\n            return tag;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nconst LONG_RETRY_FACTOR = 30;\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n    constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {\n        this.throttleMetadata = throttleMetadata;\n        this.intervalMillis = intervalMillis;\n    }\n    getThrottleMetadata(appId) {\n        return this.throttleMetadata[appId];\n    }\n    setThrottleMetadata(appId, metadata) {\n        this.throttleMetadata[appId] = metadata;\n    }\n    deleteThrottleMetadata(appId) {\n        delete this.throttleMetadata[appId];\n    }\n}\nconst defaultRetryData = new RetryData();\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey) {\n    return new Headers({\n        Accept: 'application/json',\n        'x-goog-api-key': apiKey\n    });\n}\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nasync function fetchDynamicConfig(appFields) {\n    const { appId, apiKey } = appFields;\n    const request = {\n        method: 'GET',\n        headers: getHeaders(apiKey)\n    };\n    const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n    const response = await fetch(appUrl, request);\n    if (response.status !== 200 && response.status !== 304) {\n        let errorMessage = '';\n        try {\n            // Try to get any error message text from server response.\n            const jsonResponse = (await response.json());\n            if (jsonResponse.error?.message) {\n                errorMessage = jsonResponse.error.message;\n            }\n        }\n        catch (_ignored) { }\n        throw ERROR_FACTORY.create(\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, {\n            httpStatus: response.status,\n            responseMessage: errorMessage\n        });\n    }\n    return response.json();\n}\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nasync function fetchDynamicConfigWithRetry(app, \n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\nretryData = defaultRetryData, timeoutMillis) {\n    const { appId, apiKey, measurementId } = app.options;\n    if (!appId) {\n        throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n    }\n    if (!apiKey) {\n        if (measurementId) {\n            return {\n                measurementId,\n                appId\n            };\n        }\n        throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n    }\n    const throttleMetadata = retryData.getThrottleMetadata(appId) || {\n        backoffCount: 0,\n        throttleEndTimeMillis: Date.now()\n    };\n    const signal = new AnalyticsAbortSignal();\n    setTimeout(async () => {\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n        signal.abort();\n    }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n    return attemptFetchDynamicConfigWithRetry({ appId, apiKey, measurementId }, throttleMetadata, signal, retryData);\n}\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(appFields, { throttleEndTimeMillis, backoffCount }, signal, retryData = defaultRetryData // for testing\n) {\n    const { appId, measurementId } = appFields;\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    try {\n        await setAbortableTimeout(signal, throttleEndTimeMillis);\n    }\n    catch (e) {\n        if (measurementId) {\n            logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` +\n                ` Falling back to the measurement ID ${measurementId}` +\n                ` provided in the \"measurementId\" field in the local Firebase config. [${e?.message}]`);\n            return { appId, measurementId };\n        }\n        throw e;\n    }\n    try {\n        const response = await fetchDynamicConfig(appFields);\n        // Note the SDK only clears throttle state if response is success or non-retriable.\n        retryData.deleteThrottleMetadata(appId);\n        return response;\n    }\n    catch (e) {\n        const error = e;\n        if (!isRetriableError(error)) {\n            retryData.deleteThrottleMetadata(appId);\n            if (measurementId) {\n                logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` +\n                    ` Falling back to the measurement ID ${measurementId}` +\n                    ` provided in the \"measurementId\" field in the local Firebase config. [${error?.message}]`);\n                return { appId, measurementId };\n            }\n            else {\n                throw e;\n            }\n        }\n        const backoffMillis = Number(error?.customData?.httpStatus) === 503\n            ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\n            : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n        // Increments backoff state.\n        const throttleMetadata = {\n            throttleEndTimeMillis: Date.now() + backoffMillis,\n            backoffCount: backoffCount + 1\n        };\n        // Persists state.\n        retryData.setThrottleMetadata(appId, throttleMetadata);\n        logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n        return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\n    }\n}\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n    return new Promise((resolve, reject) => {\n        // Derives backoff from given end time, normalizing negative numbers to zero.\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n        const timeout = setTimeout(resolve, backoffMillis);\n        // Adds listener, rather than sets onabort, because signal is a shared object.\n        signal.addEventListener(() => {\n            clearTimeout(timeout);\n            // If the request completes before this timeout, the rejection has no effect.\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, {\n                throttleEndTimeMillis\n            }));\n        });\n    });\n}\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e) {\n    if (!(e instanceof FirebaseError) || !e.customData) {\n        return false;\n    }\n    // Uses string index defined by ErrorData, which FirebaseError implements.\n    const httpStatus = Number(e.customData['httpStatus']);\n    return (httpStatus === 429 ||\n        httpStatus === 500 ||\n        httpStatus === 503 ||\n        httpStatus === 504);\n}\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nclass AnalyticsAbortSignal {\n    constructor() {\n        this.listeners = [];\n    }\n    addEventListener(listener) {\n        this.listeners.push(listener);\n    }\n    abort() {\n        this.listeners.forEach(listener => listener());\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nlet defaultEventParametersForInit;\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nasync function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {\n    if (options && options.global) {\n        gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, eventParams);\n        return;\n    }\n    else {\n        const measurementId = await initializationPromise;\n        const params = {\n            ...eventParams,\n            'send_to': measurementId\n        };\n        gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, params);\n    }\n}\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nasync function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {\n    if (options && options.global) {\n        gtagFunction(\"set\" /* GtagCommand.SET */, { 'screen_name': screenName });\n        return Promise.resolve();\n    }\n    else {\n        const measurementId = await initializationPromise;\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'screen_name': screenName\n        });\n    }\n}\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nasync function setUserId$1(gtagFunction, initializationPromise, id, options) {\n    if (options && options.global) {\n        gtagFunction(\"set\" /* GtagCommand.SET */, { 'user_id': id });\n        return Promise.resolve();\n    }\n    else {\n        const measurementId = await initializationPromise;\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'user_id': id\n        });\n    }\n}\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nasync function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {\n    if (options && options.global) {\n        const flatProperties = {};\n        for (const key of Object.keys(properties)) {\n            // use dot notation for merge behavior in gtag.js\n            flatProperties[`user_properties.${key}`] = properties[key];\n        }\n        gtagFunction(\"set\" /* GtagCommand.SET */, flatProperties);\n        return Promise.resolve();\n    }\n    else {\n        const measurementId = await initializationPromise;\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'user_properties': properties\n        });\n    }\n}\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n */\nasync function internalGetGoogleAnalyticsClientId(gtagFunction, initializationPromise) {\n    const measurementId = await initializationPromise;\n    return new Promise((resolve, reject) => {\n        gtagFunction(\"get\" /* GtagCommand.GET */, measurementId, 'client_id', (clientId) => {\n            if (!clientId) {\n                reject(ERROR_FACTORY.create(\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */));\n            }\n            resolve(clientId);\n        });\n    });\n}\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nasync function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {\n    const measurementId = await initializationPromise;\n    window[`ga-disable-${measurementId}`] = !enabled;\n}\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nlet defaultConsentSettingsForInit;\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nfunction _setConsentDefaultForInit(consentSettings) {\n    defaultConsentSettingsForInit = consentSettings;\n}\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nfunction _setDefaultEventParametersForInit(customParams) {\n    defaultEventParametersForInit = customParams;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function validateIndexedDB() {\n    if (!isIndexedDBAvailable()) {\n        logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: 'IndexedDB is not available in this environment.'\n        }).message);\n        return false;\n    }\n    else {\n        try {\n            await validateIndexedDBOpenable();\n        }\n        catch (e) {\n            logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n                errorInfo: e?.toString()\n            }).message);\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nasync function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\n    const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n    dynamicConfigPromise\n        .then(config => {\n        measurementIdToAppId[config.measurementId] = config.appId;\n        if (app.options.measurementId &&\n            config.measurementId !== app.options.measurementId) {\n            logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` +\n                ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n                ` To ensure analytics events are always sent to the correct Analytics property,` +\n                ` update the` +\n                ` measurement ID field in the local config or remove it from the local config.`);\n        }\n    })\n        .catch(e => logger.error(e));\n    // Add to list to track state of all dynamic config promises.\n    dynamicConfigPromisesList.push(dynamicConfigPromise);\n    const fidPromise = validateIndexedDB().then(envIsValid => {\n        if (envIsValid) {\n            return installations.getId();\n        }\n        else {\n            return undefined;\n        }\n    });\n    const [dynamicConfig, fid] = await Promise.all([\n        dynamicConfigPromise,\n        fidPromise\n    ]);\n    // Detect if user has already put the gtag <script> tag on this page with the passed in\n    // data layer name.\n    if (!findGtagScriptOnPage(dataLayerName)) {\n        insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n    }\n    // Detects if there are consent settings that need to be configured.\n    if (defaultConsentSettingsForInit) {\n        gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);\n        _setConsentDefaultForInit(undefined);\n    }\n    // This command initializes gtag.js and only needs to be called once for the entire web app,\n    // but since it is idempotent, we can call it multiple times.\n    // We keep it together with other initialization logic for better code structure.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    gtagCore('js', new Date());\n    // User config added first. We don't want users to accidentally overwrite\n    // base Firebase config properties.\n    const configProperties = options?.config ?? {};\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    configProperties[ORIGIN_KEY] = 'firebase';\n    configProperties.update = true;\n    if (fid != null) {\n        configProperties[GA_FID_KEY] = fid;\n    }\n    // It should be the first config command called on this GA-ID\n    // Initialize this GA-ID and set FID on it using the gtag config API.\n    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n    // `configProperties`.\n    gtagCore(\"config\" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);\n    // Detects if there is data that will be set on every event logged from the SDK.\n    if (defaultEventParametersForInit) {\n        gtagCore(\"set\" /* GtagCommand.SET */, defaultEventParametersForInit);\n        _setDefaultEventParametersForInit(undefined);\n    }\n    return dynamicConfig.measurementId;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Analytics Service class.\n */\nclass AnalyticsService {\n    constructor(app) {\n        this.app = app;\n    }\n    _delete() {\n        delete initializationPromisesMap[this.app.options.appId];\n        return Promise.resolve();\n    }\n}\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap = {};\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList = [];\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId = {};\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName = 'dataLayer';\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName = 'gtag';\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction;\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction;\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone = false;\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nfunction settings(options) {\n    if (globalInitDone) {\n        throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n    }\n    if (options.dataLayerName) {\n        dataLayerName = options.dataLayerName;\n    }\n    if (options.gtagName) {\n        gtagName = options.gtagName;\n    }\n}\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch() {\n    const mismatchedEnvMessages = [];\n    if (isBrowserExtension()) {\n        mismatchedEnvMessages.push('This is a browser extension environment.');\n    }\n    if (!areCookiesEnabled()) {\n        mismatchedEnvMessages.push('Cookies are not available.');\n    }\n    if (mismatchedEnvMessages.length > 0) {\n        const details = mismatchedEnvMessages\n            .map((message, index) => `(${index + 1}) ${message}`)\n            .join(' ');\n        const err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {\n            errorInfo: details\n        });\n        logger.warn(err.message);\n    }\n}\n/**\n * Analytics instance factory.\n * @internal\n */\nfunction factory(app, installations, options) {\n    warnOnBrowserContextMismatch();\n    const appId = app.options.appId;\n    if (!appId) {\n        throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n    }\n    if (!app.options.apiKey) {\n        if (app.options.measurementId) {\n            logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n                ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n                ` provided in the \"measurementId\" field in the local Firebase config.`);\n        }\n        else {\n            throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n        }\n    }\n    if (initializationPromisesMap[appId] != null) {\n        throw ERROR_FACTORY.create(\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, {\n            id: appId\n        });\n    }\n    if (!globalInitDone) {\n        // Steps here should only be done once per page: creation or wrapping\n        // of dataLayer and global gtag function.\n        getOrCreateDataLayer(dataLayerName);\n        const { wrappedGtag, gtagCore } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\n        wrappedGtagFunction = wrappedGtag;\n        gtagCoreFunction = gtagCore;\n        globalInitDone = true;\n    }\n    // Async but non-blocking.\n    // This map reflects the completion state of all promises for each appId.\n    initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\n    const analyticsInstance = new AnalyticsService(app);\n    return analyticsInstance;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nfunction getAnalytics(app = getApp()) {\n    app = getModularInstance(app);\n    // Dependencies\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n    if (analyticsProvider.isInitialized()) {\n        return analyticsProvider.getImmediate();\n    }\n    return initializeAnalytics(app);\n}\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nfunction initializeAnalytics(app, options = {}) {\n    // Dependencies\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n    if (analyticsProvider.isInitialized()) {\n        const existingInstance = analyticsProvider.getImmediate();\n        if (deepEqual(options, analyticsProvider.getOptions())) {\n            return existingInstance;\n        }\n        else {\n            throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n        }\n    }\n    const analyticsInstance = analyticsProvider.initialize({ options });\n    return analyticsInstance;\n}\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nasync function isSupported() {\n    if (isBrowserExtension()) {\n        return false;\n    }\n    if (!areCookiesEnabled()) {\n        return false;\n    }\n    if (!isIndexedDBAvailable()) {\n        return false;\n    }\n    try {\n        const isDBOpenable = await validateIndexedDBOpenable();\n        return isDBOpenable;\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\n    analyticsInstance = getModularInstance(analyticsInstance);\n    setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));\n}\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nasync function getGoogleAnalyticsClientId(analyticsInstance) {\n    analyticsInstance = getModularInstance(analyticsInstance);\n    return internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]);\n}\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nfunction setUserId(analyticsInstance, id, options) {\n    analyticsInstance = getModularInstance(analyticsInstance);\n    setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));\n}\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nfunction setUserProperties(analyticsInstance, properties, options) {\n    analyticsInstance = getModularInstance(analyticsInstance);\n    setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));\n}\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\n    analyticsInstance = getModularInstance(analyticsInstance);\n    setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));\n}\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nfunction setDefaultEventParameters(customParams) {\n    // Check if reference to existing gtag function on window object exists\n    if (wrappedGtagFunction) {\n        wrappedGtagFunction(\"set\" /* GtagCommand.SET */, customParams);\n    }\n    else {\n        _setDefaultEventParametersForInit(customParams);\n    }\n}\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\n    analyticsInstance = getModularInstance(analyticsInstance);\n    logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\n}\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nfunction setConsent(consentSettings) {\n    // Check if reference to existing gtag function on window object exists\n    if (wrappedGtagFunction) {\n        wrappedGtagFunction(\"consent\" /* GtagCommand.CONSENT */, 'update', consentSettings);\n    }\n    else {\n        _setConsentDefaultForInit(consentSettings);\n    }\n}\n\nconst name = \"@firebase/analytics\";\nconst version = \"0.10.18\";\n\n/**\n * The Firebase Analytics Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\nfunction registerAnalytics() {\n    _registerComponent(new Component(ANALYTICS_TYPE, (container, { options: analyticsOptions }) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n            .getProvider('installations-internal')\n            .getImmediate();\n        return factory(app, installations, analyticsOptions);\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */));\n    _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    registerVersion(name, version);\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    registerVersion(name, version, 'esm2020');\n    function internalFactory(container) {\n        try {\n            const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n            return {\n                logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\n            };\n        }\n        catch (e) {\n            throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {\n                reason: e\n            });\n        }\n    }\n}\nregisterAnalytics();\n\nexport { getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };\n//# sourceMappingURL=index.esm.js.map\n","import { initializeApp, getApps } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore, enableIndexedDbPersistence } from 'firebase/firestore';\r\nimport { getAnalytics, isSupported as analyticsSupported } from 'firebase/analytics';\r\n\r\n// Config pulled from env with safe defaults to your current Firebase project\r\nconst firebaseConfig = {\r\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || 'AIzaSyChmSmwpwKBCdMzrsvyidxX3Dr_fXoh-YA',\r\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || 'payroll-cae74.firebaseapp.com',\r\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || 'payroll-cae74',\r\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || 'payroll-cae74.firebasestorage.app',\r\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || '126650756988',\r\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || '1:126650756988:web:99fc9384a4ced996f53ef9',\r\n  measurementId: (import.meta.env as any).VITE_FIREBASE_MEASUREMENT_ID || 'G-S4E1B33E1P',\r\n};\r\n\r\n// Initialize (avoid re-init during HMR)\r\nconst app = getApps().length ? getApps()[0] : initializeApp(firebaseConfig);\r\n\r\n// Auth\r\nexport const auth = getAuth(app);\r\nexport const firebaseAuth = auth; // legacy alias\r\n\r\n// Firestore\r\nexport const db = getFirestore(app);\r\nexport const firebaseDb = db; // legacy alias\r\n\r\n// Offline persistence (best-effort)\r\nenableIndexedDbPersistence(db).catch((err: any) => {\r\n  // Multi-tab or unsupported environments will throw; log and continue\r\n  if (typeof console !== 'undefined') console.log('Persistence error:', err?.code || err);\r\n});\r\n\r\n// Optional analytics in browser only\r\nexport const firebaseAnalyticsPromise = (async () => {\r\n  if (typeof window === 'undefined') return null;\r\n  try { return (await analyticsSupported()) ? getAnalytics(app) : null; } catch { return null; }\r\n})();\r\n\r\n// Collection names (centralized constants)\r\nexport const collections = {\r\n  employees: 'employees',\r\n  customers: 'customers',\r\n  salaryHistory: 'salaryHistory',\r\n  leaveRecords: 'leaveRecords',\r\n  payrollRecords: 'payrollRecords',\r\n  users: 'users',\r\n} as const;\r\n","import { collection, getDocs, addDoc, serverTimestamp, Timestamp } from 'firebase/firestore';\r\nimport { firebaseDb } from '../../config/firebase';\r\nimport type { PermanentEmployee, TemporaryEmployee, Employee } from '../../types/employee';\r\n\r\nfunction genEmployeeCode(prefix: 'PRM'|'TMP') {\r\n  const year = new Date().getFullYear();\r\n  const rand = Math.floor(Math.random()*10000).toString().padStart(4,'0');\r\n  return `${prefix}-${year}-${rand}`;\r\n}\r\n\r\nfunction toDateString(val?: string | Date | Timestamp): string | undefined {\r\n  if (!val) return undefined;\r\n  if (typeof val === 'string') return val;\r\n  if (val instanceof Date) return val.toISOString();\r\n  try { return (val as Timestamp).toDate().toISOString(); } catch { return undefined; }\r\n}\r\n\r\nexport async function getAllPermanentEmployeesFS(): Promise<PermanentEmployee[]> {\r\n  const snap = await getDocs(collection(firebaseDb, 'permanent_employees'));\r\n  return snap.docs.map(d => ({ id: d.id, ...(d.data() as any) })) as PermanentEmployee[];\r\n}\r\n\r\nexport async function getAllTemporaryEmployeesFS(): Promise<TemporaryEmployee[]> {\r\n  const snap = await getDocs(collection(firebaseDb, 'temporary_employees'));\r\n  return snap.docs.map(d => ({ id: d.id, ...(d.data() as any) })) as TemporaryEmployee[];\r\n}\r\n\r\nexport async function createPermanentEmployeeFS(data: Omit<PermanentEmployee,'id'|'employeeCode'|'createdAt'|'updatedAt'|'employeeType'>): Promise<PermanentEmployee> {\r\n  const docData: any = {\r\n    ...data,\r\n    employeeCode: genEmployeeCode('PRM'),\r\n    employeeType: 'Permanent',\r\n    createdAt: serverTimestamp(),\r\n    updatedAt: serverTimestamp()\r\n  };\r\n  // compute totals similar to local service\r\n  const c = docData.compensation;\r\n  c.totalMonthlySalary = (c.basicSalary||0) + (c.housingAllowance||0) + (c.transportAllowance||0) + (c.foodAllowance||0) + (c.phoneAllowance||0) + (c.otherAllowances||0);\r\n  const ref = await addDoc(collection(firebaseDb, 'permanent_employees'), docData);\r\n  return { ...docData, id: ref.id, createdAt: toDateString(docData.createdAt)!, updatedAt: toDateString(docData.updatedAt)! } as PermanentEmployee;\r\n}\r\n\r\nexport async function createTemporaryEmployeeFS(data: Omit<TemporaryEmployee,'id'|'employeeCode'|'createdAt'|'updatedAt'|'employeeType'>): Promise<TemporaryEmployee> {\r\n  const docData: any = {\r\n    ...data,\r\n    employeeCode: genEmployeeCode('TMP'),\r\n    employeeType: 'Temporary',\r\n    createdAt: serverTimestamp(),\r\n    updatedAt: serverTimestamp()\r\n  };\r\n  const ref = await addDoc(collection(firebaseDb, 'temporary_employees'), docData);\r\n  return { ...docData, id: ref.id, createdAt: toDateString(docData.createdAt)!, updatedAt: toDateString(docData.updatedAt)! } as TemporaryEmployee;\r\n}\r\n"],"names":["name","version","PENDING_TIMEOUT_MS","PACKAGE_VERSION","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","isServerError","error","FirebaseError","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","getExpiresInFromResponseExpiresIn","getErrorFromResponse","requestName","errorData","getHeaders","apiKey","getHeadersWithAuth","appConfig","refreshToken","headers","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","createInstallationRequest","heartbeatServiceProvider","fid","endpoint","heartbeatService","heartbeatsHeader","body","request","responseValue","sleep","ms","resolve","bufferToBase64UrlSafe","array","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","encode","getKey","fidChangeCallbacks","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","callbacks","callback","channel","getBroadcastChannel","closeBroadcastChannel","broadcastChannel","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","openDB","db","oldVersion","set","value","tx","objectStore","oldValue","remove","update","updateFn","store","newValue","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","updateOrCreateInstallationEntry","entryWithPromise","triggerRegistrationIfNecessary","entry","clearTimedOutRequest","registrationPromiseWithError","inProgressEntry","registerInstallation","waitUntilFidRegistration","registeredInstallationEntry","e","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenValid","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","authToken","hasAuthTokenRequestTimedOut","updatedInstallationEntry","isAuthTokenExpired","now","inProgressAuthToken","getId","installationsImpl","getToken","completeInstallationRegistration","extractAppConfig","app","getMissingValueError","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","_getProvider","internalFactory","registerInstallations","_registerComponent","Component","registerVersion","ANALYTICS_TYPE","GA_FID_KEY","ORIGIN_KEY","FETCH_TIMEOUT_MILLIS","DYNAMIC_CONFIG_URL","GTAG_URL","logger","Logger","ERRORS","createGtagTrustedTypesScriptURL","url","err","promiseAllSettled","promises","promise","createTrustedTypesPolicy","policyName","policyOptions","trustedTypesPolicy","insertScriptTag","dataLayerName","measurementId","script","gtagScriptURL","getOrCreateDataLayer","dataLayer","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","gtagParams","correspondingAppId","foundConfig","config","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","dynamicConfigResults","sendToId","initializationPromise","wrapGtag","gtagWrapper","command","args","consentAction","fieldName","customParams","wrapOrCreateGtag","gtagFunctionName","_args","findGtagScriptOnPage","scriptTags","tag","LONG_RETRY_FACTOR","BASE_INTERVAL_MILLIS","RetryData","throttleMetadata","intervalMillis","appId","metadata","defaultRetryData","fetchDynamicConfig","appFields","appUrl","errorMessage","jsonResponse","_a","fetchDynamicConfigWithRetry","retryData","timeoutMillis","signal","AnalyticsAbortSignal","attemptFetchDynamicConfigWithRetry","throttleEndTimeMillis","backoffCount","setAbortableTimeout","isRetriableError","backoffMillis","calculateBackoffMillis","reject","timeout","httpStatus","listener","logEvent$1","gtagFunction","eventName","eventParams","options","params","validateIndexedDB","isIndexedDBAvailable","validateIndexedDBOpenable","_initializeAnalytics","dynamicConfigPromise","fidPromise","envIsValid","dynamicConfig","configProperties","AnalyticsService","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","warnOnBrowserContextMismatch","mismatchedEnvMessages","isBrowserExtension","areCookiesEnabled","details","message","index","factory","wrappedGtag","getAnalytics","getApp","getModularInstance","analyticsProvider","initializeAnalytics","existingInstance","deepEqual","isSupported","logEvent","analyticsInstance","registerAnalytics","analyticsOptions","analytics","firebaseConfig","getApps","initializeApp","getAuth","getFirestore","firebaseDb","enableIndexedDbPersistence","analyticsSupported","genEmployeeCode","prefix","year","rand","toDateString","val","getAllPermanentEmployeesFS","getDocs","collection","d","getAllTemporaryEmployeesFS","createPermanentEmployeeFS","data","docData","serverTimestamp","c","ref","addDoc","createTemporaryEmployeeFS"],"mappings":"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","x_google_ignoreList":[0,1]}