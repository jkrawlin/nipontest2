{"version":3,"file":"invoices-CLR50L-3.js","sources":["../../src/services/api/invoices.ts"],"sourcesContent":["import { CustomerService } from './customers';\r\nimport type { CustomerInvoice, CustomerInvoiceLine, Customer } from '../../types/customer';\r\n\r\ninterface DraftInvoiceOptions {\r\n  customerId: string;\r\n  periodStart: string;\r\n  periodEnd: string;\r\n  includeInactive?: boolean;\r\n}\r\n\r\nexport class InvoiceService {\r\n  private static STORAGE_KEY = 'nipon_customer_invoices';\r\n\r\n  static getAll(): CustomerInvoice[] {\r\n    try {\r\n      const raw = localStorage.getItem(this.STORAGE_KEY);\r\n      return raw ? JSON.parse(raw) : [];\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  static getByCustomer(customerId: string): CustomerInvoice[] {\r\n    return this.getAll().filter(i => i.customerId === customerId);\r\n  }\r\n\r\n  static createDraft(options: DraftInvoiceOptions): CustomerInvoice | undefined {\r\n    const customer = CustomerService.getById(options.customerId);\r\n    if (!customer) return undefined;\r\n\r\n    const activeDeployments = customer.deployment.currentEmployees.filter(emp => options.includeInactive || emp.status === 'Active');\r\n    const lines: CustomerInvoiceLine[] = [];\r\n    activeDeployments.forEach(emp => {\r\n      const rate = customer.rates.defaultRates.find(r => r.position === emp.position);\r\n      if (rate) {\r\n        let quantity = 1; // monthly default\r\n        let unitRate = rate.normalRate;\r\n        if (rate.rateType === 'Daily') {\r\n          quantity = 30; // assume 30 days\r\n        } else if (rate.rateType === 'Hourly') {\r\n          quantity = 8 * 22; // working hours\r\n        }\r\n        const amount = quantity * unitRate;\r\n        lines.push({ description: `${emp.position} - ${rate.rateType}`, position: emp.position, quantity, unitRate, amount });\r\n      }\r\n    });\r\n\r\n    const subtotal = lines.reduce((s,l)=> s + l.amount, 0);\r\n    const vatApplicable = customer.billing.vatRegistered;\r\n    const vatAmount = vatApplicable ? subtotal * 0.05 : 0;\r\n    const total = subtotal + vatAmount;\r\n    const now = new Date();\r\n    const invoice: CustomerInvoice = {\r\n      id: crypto.randomUUID(),\r\n      invoiceNumber: this.generateInvoiceNumber(),\r\n      customerId: customer.id,\r\n      periodStart: options.periodStart,\r\n      periodEnd: options.periodEnd,\r\n      issueDate: now.toISOString(),\r\n      dueDate: new Date(now.getTime() + 1000*60*60*24*30).toISOString(),\r\n      currency: customer.billing.currency,\r\n      lines,\r\n      subtotal,\r\n      vatAmount,\r\n      total,\r\n      status: 'Draft',\r\n      createdAt: now.toISOString()\r\n    };\r\n    const all = this.getAll();\r\n    all.push(invoice);\r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(all));\r\n    CustomerService.update(customer.id, {\r\n      billing: { ...customer.billing, lastInvoiceDate: now.toISOString(), lastInvoiceAmount: total },\r\n      financial: { ...customer.financial, totalRevenue: customer.financial.totalRevenue + total, currentMonthRevenue: customer.financial.currentMonthRevenue + total }\r\n    } as Partial<Customer>);\r\n    return invoice;\r\n  }\r\n\r\n  private static generateInvoiceNumber(): string {\r\n    const year = new Date().getFullYear();\r\n    const count = this.getAll().filter(i => i.invoiceNumber.startsWith(`INV-${year}`)).length + 1;\r\n    return `INV-${year}-${String(count).padStart(4,'0')}`;\r\n  }\r\n}\r\n"],"names":["InvoiceService","raw","customerId","i","options","customer","CustomerService","activeDeployments","emp","lines","rate","r","quantity","unitRate","amount","subtotal","s","l","vatAmount","total","now","invoice","all","year","count","__publicField"],"mappings":"gNAUO,MAAMA,CAAe,CAG1B,OAAO,QAA4B,CACjC,GAAI,CACF,MAAMC,EAAM,aAAa,QAAQ,KAAK,WAAW,EACjD,OAAOA,EAAM,KAAK,MAAMA,CAAG,EAAI,CAAA,CACjC,MAAQ,CACN,MAAO,CAAA,CACT,CACF,CAEA,OAAO,cAAcC,EAAuC,CAC1D,OAAO,KAAK,OAAA,EAAS,OAAOC,GAAKA,EAAE,aAAeD,CAAU,CAC9D,CAEA,OAAO,YAAYE,EAA2D,CAC5E,MAAMC,EAAWC,EAAgB,QAAQF,EAAQ,UAAU,EAC3D,GAAI,CAACC,EAAU,OAEf,MAAME,EAAoBF,EAAS,WAAW,iBAAiB,UAAcD,EAAQ,iBAAmBI,EAAI,SAAW,QAAQ,EACzHC,EAA+B,CAAA,EACrCF,EAAkB,QAAQC,GAAO,CAC/B,MAAME,EAAOL,EAAS,MAAM,aAAa,KAAKM,GAAKA,EAAE,WAAaH,EAAI,QAAQ,EAC9E,GAAIE,EAAM,CACR,IAAIE,EAAW,EACXC,EAAWH,EAAK,WAChBA,EAAK,WAAa,QACpBE,EAAW,GACFF,EAAK,WAAa,WAC3BE,EAAW,EAAI,IAEjB,MAAME,EAASF,EAAWC,EAC1BJ,EAAM,KAAK,CAAE,YAAa,GAAGD,EAAI,QAAQ,MAAME,EAAK,QAAQ,GAAI,SAAUF,EAAI,SAAU,SAAAI,EAAU,SAAAC,EAAU,OAAAC,EAAQ,CACtH,CACF,CAAC,EAED,MAAMC,EAAWN,EAAM,OAAO,CAACO,EAAEC,IAAKD,EAAIC,EAAE,OAAQ,CAAC,EAE/CC,EADgBb,EAAS,QAAQ,cACLU,EAAW,IAAO,EAC9CI,EAAQJ,EAAWG,EACnBE,MAAU,KACVC,EAA2B,CAC/B,GAAI,OAAO,WAAA,EACX,cAAe,KAAK,sBAAA,EACpB,WAAYhB,EAAS,GACrB,YAAaD,EAAQ,YACrB,UAAWA,EAAQ,UACnB,UAAWgB,EAAI,YAAA,EACf,QAAS,IAAI,KAAKA,EAAI,QAAA,EAAY,IAAK,GAAG,GAAG,GAAG,EAAE,EAAE,YAAA,EACpD,SAAUf,EAAS,QAAQ,SAC3B,MAAAI,EACA,SAAAM,EACA,UAAAG,EACA,MAAAC,EACA,OAAQ,QACR,UAAWC,EAAI,YAAA,CAAY,EAEvBE,EAAM,KAAK,OAAA,EACjB,OAAAA,EAAI,KAAKD,CAAO,EAChB,aAAa,QAAQ,KAAK,YAAa,KAAK,UAAUC,CAAG,CAAC,EAC1DhB,EAAgB,OAAOD,EAAS,GAAI,CAClC,QAAS,CAAE,GAAGA,EAAS,QAAS,gBAAiBe,EAAI,YAAA,EAAe,kBAAmBD,CAAA,EACvF,UAAW,CAAE,GAAGd,EAAS,UAAW,aAAcA,EAAS,UAAU,aAAec,EAAO,oBAAqBd,EAAS,UAAU,oBAAsBc,CAAA,CAAM,CAC3I,EACfE,CACT,CAEA,OAAe,uBAAgC,CAC7C,MAAME,EAAO,IAAI,KAAA,EAAO,YAAA,EAClBC,EAAQ,KAAK,OAAA,EAAS,OAAOrB,GAAKA,EAAE,cAAc,WAAW,OAAOoB,CAAI,EAAE,CAAC,EAAE,OAAS,EAC5F,MAAO,OAAOA,CAAI,IAAI,OAAOC,CAAK,EAAE,SAAS,EAAE,GAAG,CAAC,EACrD,CACF,CAxEEC,EADWzB,EACI,cAAc"}