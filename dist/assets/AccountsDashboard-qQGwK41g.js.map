{"version":3,"file":"AccountsDashboard-qQGwK41g.js","sources":["../../src/services/api/accounts.ts","../../src/pages/accounts/AccountsDashboard.tsx"],"sourcesContent":["import type { AccountsSummary, Account, BankAccount, Transaction, TrialBalanceRow, PaymentVoucher } from '../../types';\r\n\r\n// Simple in-memory stores for development only\r\nconst _ACCOUNTS: Account[] = [];\r\nconst _BANKS: BankAccount[] = [];\r\nconst _TRANSACTIONS: Transaction[] = [];\r\nconst _PAYMENT_VOUCHERS: PaymentVoucher[] = [];\r\n\r\nfunction seed() {\r\n  if (_ACCOUNTS.length > 0) return;\r\n  const now = new Date();\r\n  const seedAccounts: Array<Pick<Account,'accountCode'|'accountName'|'accountType'|'category'>> = [\r\n    { accountCode: '1010', accountName: 'Cash and Cash Equivalents', accountType: 'Asset', category: 'Current Assets' },\r\n    { accountCode: '1012', accountName: 'Bank Accounts', accountType: 'Asset', category: 'Current Assets' },\r\n    { accountCode: '2010', accountName: 'Accounts Payable', accountType: 'Liability', category: 'Current Liabilities' },\r\n    { accountCode: '5010', accountName: 'Salary Expense', accountType: 'Expense', category: 'Personnel' },\r\n    { accountCode: '4000', accountName: 'Revenue', accountType: 'Revenue', category: 'Operating Revenue' }\r\n  ];\r\n  seedAccounts.forEach(a => _ACCOUNTS.push({\r\n    id: crypto.randomUUID(),\r\n    accountCode: a.accountCode,\r\n    accountName: a.accountName,\r\n    accountType: a.accountType,\r\n    category: a.category,\r\n    balance: 0,\r\n    currency: 'QAR',\r\n    isActive: true,\r\n    createdAt: now,\r\n    updatedAt: now\r\n  }));\r\n  _BANKS.push({\r\n    id: crypto.randomUUID(),\r\n    bankName: 'Qatar National Bank',\r\n    accountName: 'Main Operating',\r\n    accountNumber: '1234567890',\r\n    iban: 'QA00QNB0000000001234567890',\r\n    branch: 'Doha',\r\n    currency: 'QAR',\r\n    currentBalance: 150000,\r\n    isDefault: true,\r\n    isActive: true\r\n  });\r\n}\r\nseed();\r\n\r\nexport const AccountsService = {\r\n  async getSummary(): Promise<AccountsSummary> {\r\n    const totalAssets = _ACCOUNTS.filter(a => a.accountType === 'Asset').reduce((s,a)=>s+a.balance,0);\r\n    const totalLiabilities = _ACCOUNTS.filter(a => a.accountType === 'Liability').reduce((s,a)=>s+a.balance,0);\r\n    const cashInBanks = _BANKS.reduce((s,b)=>s+b.currentBalance,0);\r\n    const monthlyExpenses = _ACCOUNTS.filter(a => a.accountType === 'Expense').reduce((s,a)=>s+Math.abs(a.balance),0);\r\n    return { totalAssets, totalLiabilities, cashInBanks, monthlyExpenses };\r\n  },\r\n  async getBankAccounts(): Promise<BankAccount[]> { return _BANKS; },\r\n  async getTransactions(opts?: { limit?: number }): Promise<Transaction[]> {\r\n    const list = [..._TRANSACTIONS].sort((a,b)=> (b.date as any) - (a.date as any));\r\n    return opts?.limit ? list.slice(0, opts.limit) : list;\r\n  },\r\n  async getTrialBalance(range: { from: Date; to: Date }): Promise<TrialBalanceRow[]> {\r\n    // Simplified: just map accounts into debit/credit based on sign\r\n    return _ACCOUNTS.map(a => ({\r\n      id: a.id,\r\n      code: a.accountCode,\r\n      name: a.accountName,\r\n      debit: a.accountType === 'Asset' || a.accountType === 'Expense' ? Math.max(a.balance,0) : 0,\r\n      credit: a.accountType === 'Liability' || a.accountType === 'Equity' || a.accountType === 'Revenue' ? Math.max(a.balance,0) : 0\r\n    }));\r\n  },\r\n  async createPaymentVoucher(data: Omit<PaymentVoucher,'id'|'voucherNumber'|'approvalStatus'|'approvedAt'|'approvedBy'|'transactionId'>): Promise<PaymentVoucher> {\r\n    const seq = String(_PAYMENT_VOUCHERS.length + 1).padStart(5,'0');\r\n    const year = new Date().getFullYear();\r\n    const pv: PaymentVoucher = { ...data, id: crypto.randomUUID(), voucherNumber: `PV-${year}-${seq}`, approvalStatus: 'Pending' };\r\n    _PAYMENT_VOUCHERS.push(pv);\r\n    return pv;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { AccountsService } from '../../services/api/accounts';\r\n\r\nexport const AccountsDashboardPage: React.FC = () => {\r\n  const { data: summary } = useQuery({ queryKey: ['accounts-summary'], queryFn: AccountsService.getSummary });\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-2xl font-semibold mb-4\">Accounts & Finance</h1>\r\n      <p className=\"text-sm text-muted-foreground mb-6\">Finance overview (placeholder minimal implementation).</p>\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n        <div className=\"p-4 border rounded-lg\">\r\n          <p className=\"text-xs uppercase tracking-wide text-muted-foreground\">Total Assets</p>\r\n          <p className=\"text-lg font-bold\">{summary?.totalAssets?.toLocaleString('en-US',{minimumFractionDigits:2}) || '0.00'} QAR</p>\r\n        </div>\r\n        <div className=\"p-4 border rounded-lg\">\r\n          <p className=\"text-xs uppercase tracking-wide text-muted-foreground\">Total Liabilities</p>\r\n          <p className=\"text-lg font-bold\">{summary?.totalLiabilities?.toLocaleString('en-US',{minimumFractionDigits:2}) || '0.00'} QAR</p>\r\n        </div>\r\n        <div className=\"p-4 border rounded-lg\">\r\n          <p className=\"text-xs uppercase tracking-wide text-muted-foreground\">Cash in Banks</p>\r\n          <p className=\"text-lg font-bold\">{summary?.cashInBanks?.toLocaleString('en-US',{minimumFractionDigits:2}) || '0.00'} QAR</p>\r\n        </div>\r\n        <div className=\"p-4 border rounded-lg\">\r\n          <p className=\"text-xs uppercase tracking-wide text-muted-foreground\">Monthly Expenses</p>\r\n          <p className=\"text-lg font-bold\">{summary?.monthlyExpenses?.toLocaleString('en-US',{minimumFractionDigits:2}) || '0.00'} QAR</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountsDashboardPage;\r\n"],"names":["_ACCOUNTS","_BANKS","seed","now","AccountsService","totalAssets","a","s","totalLiabilities","cashInBanks","b","monthlyExpenses","AccountsDashboardPage","summary","useQuery","jsxs","jsx","_a","_b","_c","_d"],"mappings":"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"}