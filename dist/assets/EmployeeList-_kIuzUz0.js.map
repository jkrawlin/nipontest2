{"version":3,"file":"EmployeeList-_kIuzUz0.js","sources":["../../src/services/api/permanentEmployees.ts","../../node_modules/@tanstack/table-core/build/lib/index.mjs","../../node_modules/@tanstack/react-table/build/lib/index.mjs","../../src/components/common/DataTable/DataTable.tsx","../../src/components/common/DataTable/DataTableToolbar.tsx","../../src/hooks/useDebounce.ts","../../src/components/features/employees/PermanentEmployeeForm.tsx","../../src/components/features/employees/TemporaryEmployeeForm.tsx","../../src/components/features/employees/EmployeeTable.tsx","../../src/pages/employees/EmployeeList.tsx"],"sourcesContent":["import { PermanentEmployee } from '../../types/employee';\r\n\r\n// Provide a resilient storage wrapper so tests (node environment) work without a DOM localStorage\r\nconst __memoryStore: Record<string, string> = {};\r\nconst safeStorage = {\r\n  getItem(key: string) {\r\n    try { return (globalThis as any).localStorage?.getItem(key) ?? __memoryStore[key] ?? null; } catch { return __memoryStore[key] ?? null; }\r\n  },\r\n  setItem(key: string, value: string) {\r\n    try { (globalThis as any).localStorage?.setItem(key, value); } catch { /* ignore */ }\r\n    __memoryStore[key] = value;\r\n  }\r\n};\r\n\r\nexport class PermanentEmployeeService {\r\n  private static STORAGE_KEY = 'nipon_permanent_employees';\r\n\r\n  static getAll(): PermanentEmployee[] {\r\n  const stored = safeStorage.getItem(this.STORAGE_KEY);\r\n    if (!stored) { this.seedInitialData(); return this.getAll(); }\r\n    return JSON.parse(stored);\r\n  }\r\n\r\n  static create(data: Omit<PermanentEmployee, 'id' | 'employeeCode' | 'createdAt' | 'updatedAt' | 'employeeType'>): PermanentEmployee {\r\n    const employees = this.getAll();\r\n    const newEmployee: PermanentEmployee = {\r\n      ...data,\r\n      id: crypto.randomUUID(),\r\n      employeeCode: this.generateEmployeeCode(),\r\n      employeeType: 'Permanent',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    newEmployee.compensation.totalMonthlySalary = this.computeTotalSalary(newEmployee);\r\n    newEmployee.endOfService.serviceYears = this.calculateServiceYears(newEmployee.employment.joiningDate);\r\n    newEmployee.endOfService.gratuityAmount = this.calculateGratuity(newEmployee);\r\n    newEmployee.endOfService.eligible = newEmployee.endOfService.serviceYears >= 1;\r\n    employees.push(newEmployee); this.save(employees); return newEmployee;\r\n  }\r\n\r\n  private static computeTotalSalary(e: Pick<PermanentEmployee,'compensation'>): number {\r\n    const c = e.compensation; return c.basicSalary + c.housingAllowance + c.transportAllowance + (c.foodAllowance||0) + (c.phoneAllowance||0) + (c.otherAllowances||0);\r\n  }\r\n  private static calculateServiceYears(joiningDate: string): number {\r\n    const start = new Date(joiningDate).getTime(); const diffYears = (Date.now()-start)/(1000*60*60*24*365); return Math.round(diffYears*10)/10;\r\n  }\r\n  static calculateGratuity(employee: PermanentEmployee): number {\r\n    const years = employee.endOfService.serviceYears; if (years <1) return 0; const basic = employee.compensation.basicSalary; let g=0; const firstFive=Math.min(years,5); g += (basic*3*firstFive)/4.33; if(years>5) g += (basic*4*(years-5))/4.33; return Math.round(g*100)/100; }\r\n  // IMPORTANT: Do not call getAll() here because during initial seeding storage is still empty and\r\n  // getAll() would trigger another seed causing infinite recursion. Instead, read raw storage.\r\n  private static generateEmployeeCode(): string {\r\n    const year = new Date().getFullYear();\r\n    const raw = safeStorage.getItem(this.STORAGE_KEY);\r\n    let existing: PermanentEmployee[] = [];\r\n    if (raw) {\r\n      try { existing = JSON.parse(raw) as PermanentEmployee[]; } catch { existing = []; }\r\n    }\r\n    const count = existing.filter(e => e.employeeCode.startsWith(`PRM-${year}`)).length + 1;\r\n    return `PRM-${year}-${String(count).padStart(4,'0')}`;\r\n  }\r\n  private static save(list: PermanentEmployee[]) { safeStorage.setItem(this.STORAGE_KEY, JSON.stringify(list)); }\r\n  private static seedInitialData() {\r\n    const sample: Omit<PermanentEmployee,'id'|'employeeCode'|'createdAt'|'updatedAt'|'employeeType'>[] = [\r\n      {\r\n        personalInfo:{firstName:'Ahmed',lastName:'Hassan',fatherName:'Hassan Ali',dateOfBirth:'1985-03-15',placeOfBirth:'Cairo',nationality:'Egyptian',religion:'Islam',gender:'Male',maritalStatus:'Married',bloodGroup:'O+'},\r\n        documents:{qatarId:{number:'28512345678',issueDate:'2022-01-15',expiryDate:'2025-01-14',profession:'Engineer',sponsor:'Nipon Trading WLL'},passport:{number:'A12345678',issueDate:'2020-06-01',expiryDate:'2030-05-31',issuePlace:'Cairo'},visa:{number:'VN123456',issueDate:'2022-01-01',expiryDate:'2024-12-31',type:'Work',sponsor:'Nipon Trading WLL',occupation:'Engineer'},healthCard:{number:'HC123456',issueDate:'2022-02-01',expiryDate:'2025-01-31'},laborContract:{number:'MADLSA/2022/12345',startDate:'2022-01-15',authenticated:true}},\r\n  employment:{position:'Senior Engineer',department:'Engineering',joiningDate:'2022-01-15',confirmationDate:'2022-04-15',contractType:'Unlimited',workLocation:'Doha Head Office'},\r\n        compensation:{basicSalary:8000,housingAllowance:2000,transportAllowance:500,foodAllowance:300,phoneAllowance:100,otherAllowances:0,totalMonthlySalary:0,bankName:'QNB',accountNumber:'1234567890',iban:'QA58QNBA000000000001234567890'},\r\n        leave:{annualLeaveEntitlement:21,annualLeaveBalance:15,annualLeaveTaken:6,sickLeaveBalance:14,sickLeaveTaken:2,emergencyLeaveBalance:3,unpaidLeaveDays:0},\r\n        contact:{mobileQatar:'+97433456789',address:'Building 25, Street 850, Zone 55, Doha',emergencyContact:{name:'Fatima Hassan',relationship:'Wife',phone:'+97455678901'}},\r\n        status:'Active',\r\n        endOfService:{eligible:true,serviceYears:0,gratuityAmount:0,exitPermitRequired:true}\r\n      }\r\n    ];\r\n    const enriched = sample.map(s=>({\r\n      ...s,\r\n      id: crypto.randomUUID(), employeeCode: this.generateEmployeeCode(), employeeType:'Permanent', createdAt:new Date().toISOString(), updatedAt:new Date().toISOString()\r\n    })) as PermanentEmployee[];\r\n    enriched.forEach(e=> { e.compensation.totalMonthlySalary=this.computeTotalSalary(e); e.endOfService.serviceYears=this.calculateServiceYears(e.employment.joiningDate); e.endOfService.gratuityAmount=this.calculateGratuity(e); });\r\n    this.save(enriched);\r\n  }\r\n}\r\n","/**\n   * table-core\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction isNumberArray(d) {\n  return Array.isArray(d) && d.every(val => typeof val === 'number');\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return depArgs => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps(depArgs);\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null || opts.onChange == null || opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\nfunction getMemoOptions(tableOptions, debugLevel, key, onChange) {\n  return {\n    debug: () => {\n      var _tableOptions$debugAl;\n      return (_tableOptions$debugAl = tableOptions == null ? void 0 : tableOptions.debugAll) != null ? _tableOptions$debugAl : tableOptions[debugLevel];\n    },\n    key: process.env.NODE_ENV === 'development' && key,\n    onChange\n  };\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), getMemoOptions(table.options, 'debugCells', 'cell.getContext'))\n  };\n  table._features.forEach(feature => {\n    feature.createCell == null || feature.createCell(cell, column, row, table);\n  }, {});\n  return cell;\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? typeof String.prototype.replaceAll === 'function' ? accessorKey.replaceAll('.', '_') : accessorKey.replace(/\\./g, '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns'))\n  };\n  for (const feature of table._features) {\n    feature.createColumn == null || feature.createColumn(column, table);\n  }\n\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\n  return column;\n}\n\nconst debug = 'debugHeaders';\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    feature.createHeader == null || feature.createHeader(header, table);\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      var _left$map$filter, _right$map$filter;\n      const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n      const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n      const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n      return headerGroups;\n    }, getMemoOptions(table.options, debug, 'getHeaderGroups'));\n    table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n    }, getMemoOptions(table.options, debug, 'getCenterHeaderGroups'));\n    table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n      var _left$map$filter2;\n      const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n    }, getMemoOptions(table.options, debug, 'getLeftHeaderGroups'));\n    table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n      var _right$map$filter2;\n      const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n    }, getMemoOptions(table.options, debug, 'getRightHeaderGroups'));\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getFooterGroups'));\n    table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getLeftFooterGroups'));\n    table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getCenterFooterGroups'));\n    table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getRightFooterGroups'));\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return headerGroups.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getFlatHeaders'));\n    table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeftFlatHeaders'));\n    table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getCenterFlatHeaders'));\n    table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getRightFlatHeaders'));\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders;\n        return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getCenterLeafHeaders'));\n    table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders2;\n        return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getLeftLeafHeaders'));\n    table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders3;\n        return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getRightLeafHeaders'));\n    table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n      var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n      return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n        return header.getLeafHeaders();\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeafHeaders'));\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : undefined,\n    getParentRows: () => {\n      let parentRows = [];\n      let currentRow = row;\n      while (true) {\n        const parentRow = currentRow.getParentRow();\n        if (!parentRow) break;\n        parentRows.push(parentRow);\n        currentRow = parentRow;\n      }\n      return parentRows.reverse();\n    },\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCells')),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId'))\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    feature == null || feature.createRow == null || feature.createRow(row, table);\n  }\n  return row;\n};\n\n//\n\nconst ColumnFaceting = {\n  createColumn: (column, table) => {\n    column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return column._getFacetedRowModel();\n    };\n    column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map();\n      }\n      return column._getFacetedUniqueValues();\n    };\n    column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined;\n      }\n      return column._getFacetedMinMaxValues();\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _filterValue$toString, _row$getValue;\n  const search = filterValue == null || (_filterValue$toString = filterValue.toString()) == null ? void 0 : _filterValue$toString.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n  return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst ColumnFiltering = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return filterFns.includesString;\n      }\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange;\n      }\n      if (typeof value === 'boolean') {\n        return filterFns.equals;\n      }\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals;\n      }\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes;\n      }\n      return filterFns.weakEquals;\n    };\n    column.getFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : // @ts-ignore\n      (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n    };\n    column.getCanFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n      return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n    };\n    column.getIsFiltered = () => column.getFilterIndex() > -1;\n    column.getFilterValue = () => {\n      var _table$getState$colum;\n      return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum.value;\n    };\n    column.getFilterIndex = () => {\n      var _table$getState$colum2, _table$getState$colum3;\n      return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex(d => d.id === column.id)) != null ? _table$getState$colum2 : -1;\n    };\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn();\n        const previousFilter = old == null ? void 0 : old.find(d => d.id === column.id);\n        const newFilter = functionalUpdate(value, previousFilter ? previousFilter.value : undefined);\n\n        //\n        if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n          var _old$filter;\n          return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n        }\n        const newFilterObj = {\n          id: column.id,\n          value: newFilter\n        };\n        if (previousFilter) {\n          var _old$map;\n          return (_old$map = old == null ? void 0 : old.map(d => {\n            if (d.id === column.id) {\n              return newFilterObj;\n            }\n            return d;\n          })) != null ? _old$map : [];\n        }\n        if (old != null && old.length) {\n          return [...old, newFilterObj];\n        }\n        return [newFilterObj];\n      });\n    };\n  },\n  createRow: (row, _table) => {\n    row.columnFilters = {};\n    row.columnFiltersMeta = {};\n  },\n  createTable: table => {\n    table.setColumnFilters = updater => {\n      const leafColumns = table.getAllLeafColumns();\n      const updateFn = old => {\n        var _functionalUpdate;\n        return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id);\n          if (column) {\n            const filterFn = column.getFilterFn();\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false;\n            }\n          }\n          return true;\n        });\n      };\n      table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);\n    };\n    table.resetColumnFilters = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n    };\n    table.getPreFilteredRowModel = () => table.getCoreRowModel();\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n      }\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getFilteredRowModel();\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  const values = leafRows.map(row => row.getValue(columnId));\n  if (!isNumberArray(values)) {\n    return;\n  }\n  if (values.length === 1) {\n    return values[0];\n  }\n  const mid = Math.floor(values.length / 2);\n  const nums = values.sort((a, b) => a - b);\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst ColumnGrouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old != null && old.includes(column.id)) {\n          return old.filter(d => d !== column.id);\n        }\n        return [...(old != null ? old : []), column.id];\n      });\n    };\n    column.getCanGroup = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGrouping) != null ? _table$options$enable : true) && (!!column.accessorFn || !!column.columnDef.getGroupingValue);\n    };\n    column.getIsGrouped = () => {\n      var _table$getState$group;\n      return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n    };\n    column.getGroupedIndex = () => {\n      var _table$getState$group2;\n      return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n    };\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup();\n      return () => {\n        if (!canGroup) return;\n        column.toggleGrouping();\n      };\n    };\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'number') {\n        return aggregationFns.sum;\n      }\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent;\n      }\n    };\n    column.getAggregationFn = () => {\n      var _table$options$aggreg, _table$options$aggreg2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n    };\n  },\n  createTable: table => {\n    table.setGrouping = updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);\n    table.resetGrouping = defaultState => {\n      var _table$initialState$g, _table$initialState;\n      table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n    };\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel();\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n      }\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel();\n      }\n      return table._getGroupedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.getIsGrouped = () => !!row.groupingColumnId;\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.columnDef.getGroupingValue)) {\n        return row.getValue(columnId);\n      }\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\n      return row._groupingValuesCache[columnId];\n    };\n    row._groupingValuesCache = {};\n  },\n  createCell: (cell, column, row, table) => {\n    cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();\n    cell.getIsAggregated = () => {\n      var _row$subRows;\n      return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst ColumnOrdering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getIndex = memo(position => [_getVisibleLeafColumns(table, position)], columns => columns.findIndex(d => d.id === column.id), getMemoOptions(table.options, 'debugColumns', 'getIndex'));\n    column.getIsFirstColumn = position => {\n      var _columns$;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns$ = columns[0]) == null ? void 0 : _columns$.id) === column.id;\n    };\n    column.getIsLastColumn = position => {\n      var _columns;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns = columns[columns.length - 1]) == null ? void 0 : _columns.id) === column.id;\n    };\n  },\n  createTable: table => {\n    table.setColumnOrder = updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);\n    table.resetColumnOrder = defaultState => {\n      var _table$initialState$c;\n      table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n    };\n    table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n      // Sort grouped columns to the start of the column list\n      // before the headers are built\n      let orderedColumns = [];\n\n      // If there is no order, return the normal columns\n      if (!(columnOrder != null && columnOrder.length)) {\n        orderedColumns = columns;\n      } else {\n        const columnOrderCopy = [...columnOrder];\n\n        // If there is an order, make a copy of the columns\n        const columnsCopy = [...columns];\n\n        // And make a new ordered array of the columns\n\n        // Loop over the columns and place them in order into the new array\n        while (columnsCopy.length && columnOrderCopy.length) {\n          const targetColumnId = columnOrderCopy.shift();\n          const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n          if (foundIndex > -1) {\n            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n          }\n        }\n\n        // If there are any columns left, add them to the end\n        orderedColumns = [...orderedColumns, ...columnsCopy];\n      }\n      return orderColumns(orderedColumns, grouping, groupedColumnMode);\n    }, getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn'));\n  }\n};\n\n//\n\nconst getDefaultColumnPinningState = () => ({\n  left: [],\n  right: []\n});\nconst ColumnPinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.pin = position => {\n      const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n      table.setColumnPinning(old => {\n        var _old$left3, _old$right3;\n        if (position === 'right') {\n          var _old$left, _old$right;\n          return {\n            left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n          };\n        }\n        if (position === 'left') {\n          var _old$left2, _old$right2;\n          return {\n            left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n            right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        }\n        return {\n          left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n          right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n        };\n      });\n    };\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns();\n      return leafColumns.some(d => {\n        var _d$columnDef$enablePi, _ref, _table$options$enable;\n        return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);\n      });\n    };\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id);\n      const {\n        left,\n        right\n      } = table.getState().columnPinning;\n      const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n      const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n      return isLeft ? 'left' : isRight ? 'right' : false;\n    };\n    column.getPinnedIndex = () => {\n      var _table$getState$colum, _table$getState$colum2;\n      const position = column.getIsPinned();\n      return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n    };\n  },\n  createRow: (row, table) => {\n    row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allCells.filter(d => !leftAndRight.includes(d.column.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells'));\n    row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left], (allCells, left) => {\n      const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'left'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells'));\n    row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n      const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'right'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells'));\n  },\n  createTable: table => {\n    table.setColumnPinning = updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);\n    table.resetColumnPinning = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      return table.setColumnPinning(defaultState ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());\n    };\n    table.getIsSomeColumnsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().columnPinning;\n      if (!position) {\n        var _pinningState$left, _pinningState$right;\n        return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n      return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns'));\n    table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n      return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns'));\n    table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allColumns.filter(d => !leftAndRight.includes(d.id));\n    }, getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns'));\n  }\n};\n\nfunction safelyAccessDocument(_document) {\n  return _document || (typeof document !== 'undefined' ? document : null);\n}\n\n//\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      columnResizeDirection: 'ltr',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getSize = () => {\n      var _column$columnDef$min, _ref, _column$columnDef$max;\n      const columnSize = table.getState().columnSizing[column.id];\n      return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n    };\n    column.getStart = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(0, column.getIndex(position)).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getStart'));\n    column.getAfter = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(column.getIndex(position) + 1).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getAfter'));\n    column.resetSize = () => {\n      table.setColumnSizing(_ref2 => {\n        let {\n          [column.id]: _,\n          ...rest\n        } = _ref2;\n        return rest;\n      });\n    };\n    column.getCanResize = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n    };\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id;\n    };\n  },\n  createHeader: (header, table) => {\n    header.getSize = () => {\n      let sum = 0;\n      const recurse = header => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse);\n        } else {\n          var _header$column$getSiz;\n          sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n        }\n      };\n      recurse(header);\n      return sum;\n    };\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n      }\n      return 0;\n    };\n    header.getResizeHandler = _contextDocument => {\n      const column = table.getColumn(header.column.id);\n      const canResize = column == null ? void 0 : column.getCanResize();\n      return e => {\n        if (!column || !canResize) {\n          return;\n        }\n        e.persist == null || e.persist();\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return;\n          }\n        }\n        const startSize = header.getSize();\n        const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n        const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n        const newColumnSizing = {};\n        const updateOffset = (eventType, clientXPos) => {\n          if (typeof clientXPos !== 'number') {\n            return;\n          }\n          table.setColumnSizingInfo(old => {\n            var _old$startOffset, _old$startSize;\n            const deltaDirection = table.options.columnResizeDirection === 'rtl' ? -1 : 1;\n            const deltaOffset = (clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0)) * deltaDirection;\n            const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n            old.columnSizingStart.forEach(_ref3 => {\n              let [columnId, headerSize] = _ref3;\n              newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n            });\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage\n            };\n          });\n          if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing\n            }));\n          }\n        };\n        const onMove = clientXPos => updateOffset('move', clientXPos);\n        const onEnd = clientXPos => {\n          updateOffset('end', clientXPos);\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: []\n          }));\n        };\n        const contextDocument = safelyAccessDocument(_contextDocument);\n        const mouseEvents = {\n          moveHandler: e => onMove(e.clientX),\n          upHandler: e => {\n            contextDocument == null || contextDocument.removeEventListener('mousemove', mouseEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('mouseup', mouseEvents.upHandler);\n            onEnd(e.clientX);\n          }\n        };\n        const touchEvents = {\n          moveHandler: e => {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onMove(e.touches[0].clientX);\n            return false;\n          },\n          upHandler: e => {\n            var _e$touches$;\n            contextDocument == null || contextDocument.removeEventListener('touchmove', touchEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('touchend', touchEvents.upHandler);\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n          }\n        };\n        const passiveIfSupported = passiveEventSupported() ? {\n          passive: false\n        } : false;\n        if (isTouchStartEvent(e)) {\n          contextDocument == null || contextDocument.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n        } else {\n          contextDocument == null || contextDocument.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n        }\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id\n        }));\n      };\n    };\n  },\n  createTable: table => {\n    table.setColumnSizing = updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);\n    table.setColumnSizingInfo = updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);\n    table.resetColumnSizing = defaultState => {\n      var _table$initialState$c;\n      table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n    };\n    table.resetHeaderSizeInfo = defaultState => {\n      var _table$initialState$c2;\n      table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n    };\n    table.getTotalSize = () => {\n      var _table$getHeaderGroup, _table$getHeaderGroup2;\n      return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getHeaderGroup : 0;\n    };\n    table.getLeftTotalSize = () => {\n      var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n      return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getLeftHeaderG : 0;\n    };\n    table.getCenterTotalSize = () => {\n      var _table$getCenterHeade, _table$getCenterHeade2;\n      return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getCenterHeade : 0;\n    };\n    table.getRightTotalSize = () => {\n      var _table$getRightHeader, _table$getRightHeader2;\n      return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getRightHeader : 0;\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst ColumnVisibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value != null ? value : !column.getIsVisible()\n        }));\n      }\n    };\n    column.getIsVisible = () => {\n      var _ref, _table$getState$colum;\n      const childColumns = column.columns;\n      return (_ref = childColumns.length ? childColumns.some(c => c.getIsVisible()) : (_table$getState$colum = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum[column.id]) != null ? _ref : true;\n    };\n    column.getCanHide = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n    };\n    column.getToggleVisibilityHandler = () => {\n      return e => {\n        column.toggleVisibility == null || column.toggleVisibility(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n      return cells.filter(cell => cell.column.getIsVisible());\n    }, getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells'));\n    row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], getMemoOptions(table.options, 'debugRows', 'getVisibleCells'));\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, getMemoOptions(table.options, 'debugColumns', key));\n    };\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns());\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns());\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns());\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns());\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns());\n    table.setColumnVisibility = updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);\n    table.resetColumnVisibility = defaultState => {\n      var _table$initialState$c;\n      table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n    };\n    table.toggleAllColumnsVisible = value => {\n      var _value;\n      value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n      table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n        ...obj,\n        [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n      }), {}));\n    };\n    table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible()));\n    table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible());\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return e => {\n        var _target;\n        table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nfunction _getVisibleLeafColumns(table, position) {\n  return !position ? table.getVisibleLeafColumns() : position === 'center' ? table.getCenterVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n}\n\n//\n\nconst GlobalFaceting = {\n  createTable: table => {\n    table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__');\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getGlobalFacetedRowModel();\n    };\n    table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__');\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map();\n      }\n      return table._getGlobalFacetedUniqueValues();\n    };\n    table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__');\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return;\n      }\n      return table._getGlobalFacetedMinMaxValues();\n    };\n  }\n};\n\n//\n\nconst GlobalFiltering = {\n  getInitialState: state => {\n    return {\n      globalFilter: undefined,\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getCanGlobalFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2, _table$options$getCol;\n      return ((_column$columnDef$ena = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGlobalFilter) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n    };\n  },\n  createTable: table => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString;\n    };\n    table.getGlobalFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      const {\n        globalFilterFn: globalFilterFn\n      } = table.options;\n      return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[globalFilterFn]) != null ? _table$options$filter : filterFns[globalFilterFn];\n    };\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);\n    };\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n    };\n  }\n};\n\n//\n\nconst RowExpanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetExpanded = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetExpanded();\n          queued = false;\n        });\n      }\n    };\n    table.setExpanded = updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true);\n      } else {\n        table.setExpanded({});\n      }\n    };\n    table.resetExpanded = defaultState => {\n      var _table$initialState$e, _table$initialState;\n      table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n    };\n    table.getCanSomeRowsExpand = () => {\n      return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n    };\n    table.getToggleAllRowsExpandedHandler = () => {\n      return e => {\n        e.persist == null || e.persist();\n        table.toggleAllRowsExpanded();\n      };\n    };\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n      return expanded === true || Object.values(expanded).some(Boolean);\n    };\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true;\n      }\n      if (!Object.keys(expanded).length) {\n        return false;\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false;\n      }\n\n      // They must all be expanded :shrug:\n      return true;\n    };\n    table.getExpandedDepth = () => {\n      let maxDepth = 0;\n      const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n      rowIds.forEach(id => {\n        const splitId = id.split('.');\n        maxDepth = Math.max(maxDepth, splitId.length);\n      });\n      return maxDepth;\n    };\n    table.getPreExpandedRowModel = () => table.getSortedRowModel();\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n      }\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel();\n      }\n      return table._getExpandedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        var _expanded;\n        const exists = old === true ? true : !!(old != null && old[row.id]);\n        let oldExpanded = {};\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true;\n          });\n        } else {\n          oldExpanded = old;\n        }\n        expanded = (_expanded = expanded) != null ? _expanded : !exists;\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true\n          };\n        }\n        if (exists && !expanded) {\n          const {\n            [row.id]: _,\n            ...rest\n          } = oldExpanded;\n          return rest;\n        }\n        return old;\n      });\n    };\n    row.getIsExpanded = () => {\n      var _table$options$getIsR;\n      const expanded = table.getState().expanded;\n      return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n    };\n    row.getCanExpand = () => {\n      var _table$options$getRow, _table$options$enable, _row$subRows;\n      return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true;\n      let currentRow = row;\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true);\n        isFullyExpanded = currentRow.getIsExpanded();\n      }\n      return isFullyExpanded;\n    };\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand();\n      return () => {\n        if (!canExpand) return;\n        row.toggleExpanded();\n      };\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst RowPagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetPageIndex = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetPageIndex();\n          queued = false;\n        });\n      }\n    };\n    table.setPagination = updater => {\n      const safeUpdater = old => {\n        let newState = functionalUpdate(updater, old);\n        return newState;\n      };\n      return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n    };\n    table.resetPagination = defaultState => {\n      var _table$initialState$p;\n      table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n    };\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex);\n        const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n        return {\n          ...old,\n          pageIndex\n        };\n      });\n    };\n    table.resetPageIndex = defaultState => {\n      var _table$initialState$p2, _table$initialState;\n      table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n    };\n    table.resetPageSize = defaultState => {\n      var _table$initialState$p3, _table$initialState2;\n      table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);\n    };\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n        const topRowIndex = old.pageSize * old.pageIndex;\n        const pageIndex = Math.floor(topRowIndex / pageSize);\n        return {\n          ...old,\n          pageIndex,\n          pageSize\n        };\n      });\n    };\n    //deprecated\n    table.setPageCount = updater => table.setPagination(old => {\n      var _table$options$pageCo;\n      let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n      if (typeof newPageCount === 'number') {\n        newPageCount = Math.max(-1, newPageCount);\n      }\n      return {\n        ...old,\n        pageCount: newPageCount\n      };\n    });\n    table.getPageOptions = memo(() => [table.getPageCount()], pageCount => {\n      let pageOptions = [];\n      if (pageCount && pageCount > 0) {\n        pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n      }\n      return pageOptions;\n    }, getMemoOptions(table.options, 'debugTable', 'getPageOptions'));\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;\n    table.getCanNextPage = () => {\n      const {\n        pageIndex\n      } = table.getState().pagination;\n      const pageCount = table.getPageCount();\n      if (pageCount === -1) {\n        return true;\n      }\n      if (pageCount === 0) {\n        return false;\n      }\n      return pageIndex < pageCount - 1;\n    };\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1);\n    };\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1;\n      });\n    };\n    table.firstPage = () => {\n      return table.setPageIndex(0);\n    };\n    table.lastPage = () => {\n      return table.setPageIndex(table.getPageCount() - 1);\n    };\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel();\n    table.getPaginationRowModel = () => {\n      if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n        table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n      }\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel();\n      }\n      return table._getPaginationRowModel();\n    };\n    table.getPageCount = () => {\n      var _table$options$pageCo2;\n      return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getRowCount() / table.getState().pagination.pageSize);\n    };\n    table.getRowCount = () => {\n      var _table$options$rowCou;\n      return (_table$options$rowCou = table.options.rowCount) != null ? _table$options$rowCou : table.getPrePaginationRowModel().rows.length;\n    };\n  }\n};\n\n//\n\nconst getDefaultRowPinningState = () => ({\n  top: [],\n  bottom: []\n});\nconst RowPinning = {\n  getInitialState: state => {\n    return {\n      rowPinning: getDefaultRowPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowPinningChange: makeStateUpdater('rowPinning', table)\n    };\n  },\n  createRow: (row, table) => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows ? row.getLeafRows().map(_ref => {\n        let {\n          id\n        } = _ref;\n        return id;\n      }) : [];\n      const parentRowIds = includeParentRows ? row.getParentRows().map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return id;\n      }) : [];\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds]);\n      table.setRowPinning(old => {\n        var _old$top3, _old$bottom3;\n        if (position === 'bottom') {\n          var _old$top, _old$bottom;\n          return {\n            top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter(d => !(rowIds != null && rowIds.has(d))),\n            bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)]\n          };\n        }\n        if (position === 'top') {\n          var _old$top2, _old$bottom2;\n          return {\n            top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)],\n            bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n          };\n        }\n        return {\n          top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter(d => !(rowIds != null && rowIds.has(d))),\n          bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n        };\n      });\n    };\n    row.getCanPin = () => {\n      var _ref3;\n      const {\n        enableRowPinning,\n        enablePinning\n      } = table.options;\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row);\n      }\n      return (_ref3 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref3 : true;\n    };\n    row.getIsPinned = () => {\n      const rowIds = [row.id];\n      const {\n        top,\n        bottom\n      } = table.getState().rowPinning;\n      const isTop = rowIds.some(d => top == null ? void 0 : top.includes(d));\n      const isBottom = rowIds.some(d => bottom == null ? void 0 : bottom.includes(d));\n      return isTop ? 'top' : isBottom ? 'bottom' : false;\n    };\n    row.getPinnedIndex = () => {\n      var _ref4, _visiblePinnedRowIds$;\n      const position = row.getIsPinned();\n      if (!position) return -1;\n      const visiblePinnedRowIds = (_ref4 = position === 'top' ? table.getTopRows() : table.getBottomRows()) == null ? void 0 : _ref4.map(_ref5 => {\n        let {\n          id\n        } = _ref5;\n        return id;\n      });\n      return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;\n    };\n  },\n  createTable: table => {\n    table.setRowPinning = updater => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);\n    table.resetRowPinning = defaultState => {\n      var _table$initialState$r, _table$initialState;\n      return table.setRowPinning(defaultState ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());\n    };\n    table.getIsSomeRowsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().rowPinning;\n      if (!position) {\n        var _pinningState$top, _pinningState$bottom;\n        return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table._getPinnedRows = (visibleRows, pinnedRowIds, position) => {\n      var _table$options$keepPi;\n      const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ?\n      //get all rows that are pinned even if they would not be otherwise visible\n      //account for expanded parent rows, but not pagination or filtering\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => {\n        const row = table.getRow(rowId, true);\n        return row.getIsAllParentsExpanded() ? row : null;\n      }) :\n      //else get only visible rows that are pinned\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => visibleRows.find(row => row.id === rowId));\n      return rows.filter(Boolean).map(d => ({\n        ...d,\n        position\n      }));\n    };\n    table.getTopRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top], (allRows, topPinnedRowIds) => table._getPinnedRows(allRows, topPinnedRowIds, 'top'), getMemoOptions(table.options, 'debugRows', 'getTopRows'));\n    table.getBottomRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.bottom], (allRows, bottomPinnedRowIds) => table._getPinnedRows(allRows, bottomPinnedRowIds, 'bottom'), getMemoOptions(table.options, 'debugRows', 'getBottomRows'));\n    table.getCenterRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top, bottom) => {\n      const topAndBottom = new Set([...(top != null ? top : []), ...(bottom != null ? bottom : [])]);\n      return allRows.filter(d => !topAndBottom.has(d.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterRows'));\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n  createTable: table => {\n    table.setRowSelection = updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);\n    table.resetRowSelection = defaultState => {\n      var _table$initialState$r;\n      return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n    };\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return;\n            }\n            rowSelection[row.id] = true;\n          });\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id];\n          });\n        }\n        return rowSelection;\n      });\n    };\n    table.toggleAllPageRowsSelected = value => table.setRowSelection(old => {\n      const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n      const rowSelection = {\n        ...old\n      };\n      table.getRowModel().rows.forEach(row => {\n        mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);\n      });\n      return rowSelection;\n    });\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel();\n    table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel'));\n    table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel'));\n    table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel'));\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n      if (isAllRowsSelected) {\n        if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n          isAllRowsSelected = false;\n        }\n      }\n      return isAllRowsSelected;\n    };\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllPageRowsSelected = !!paginationFlatRows.length;\n      if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n        isAllPageRowsSelected = false;\n      }\n      return isAllPageRowsSelected;\n    };\n    table.getIsSomeRowsSelected = () => {\n      var _table$getState$rowSe;\n      const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n      return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n    };\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows;\n      return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n    };\n    table.getToggleAllRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllRowsSelected(e.target.checked);\n      };\n    };\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllPageRowsSelected(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleSelected = (value, opts) => {\n      const isSelected = row.getIsSelected();\n      table.setRowSelection(old => {\n        var _opts$selectChildren;\n        value = typeof value !== 'undefined' ? value : !isSelected;\n        if (row.getCanSelect() && isSelected === value) {\n          return old;\n        }\n        const selectedRowIds = {\n          ...old\n        };\n        mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);\n        return selectedRowIds;\n      });\n    };\n    row.getIsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isRowSelected(row, rowSelection);\n    };\n    row.getIsSomeSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'some';\n    };\n    row.getIsAllSubRowsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'all';\n    };\n    row.getCanSelect = () => {\n      var _table$options$enable;\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row);\n      }\n      return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n    };\n    row.getCanSelectSubRows = () => {\n      var _table$options$enable2;\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row);\n      }\n      return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n    };\n    row.getCanMultiSelect = () => {\n      var _table$options$enable3;\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row);\n      }\n      return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n    };\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect();\n      return e => {\n        var _target;\n        if (!canSelect) return;\n        row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {\n  var _row$subRows;\n  const row = table.getRow(id, true);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  var _row$subRows3;\n  if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length)) return false;\n  let allChildrenSelected = true;\n  let someSelected = false;\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return;\n    }\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection);\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true;\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true;\n        allChildrenSelected = false;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n  });\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst RowSorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n      let isString = false;\n      for (const row of firstRows) {\n        const value = row == null ? void 0 : row.getValue(column.id);\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime;\n        }\n        if (typeof value === 'string') {\n          isString = true;\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric;\n          }\n        }\n      }\n      if (isString) {\n        return sortingFns.text;\n      }\n      return sortingFns.basic;\n    };\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return 'asc';\n      }\n      return 'desc';\n    };\n    column.getSortingFn = () => {\n      var _table$options$sortin, _table$options$sortin2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n    };\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder();\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n        const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n        let newSorting = [];\n\n        // What should we do with this sort action?\n        let sortAction;\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n        // Multi-mode\n        if (old != null && old.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'add';\n          }\n        } else {\n          // Normal mode\n          if (old != null && old.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace';\n          } else if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'replace';\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove';\n            }\n          }\n        }\n        if (sortAction === 'add') {\n          var _table$options$maxMul;\n          newSorting = [...old, {\n            id: column.id,\n            desc: nextDesc\n          }];\n          // Take latest n columns\n          newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc\n              };\n            }\n            return d;\n          });\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id);\n        } else {\n          newSorting = [{\n            id: column.id,\n            desc: nextDesc\n          }];\n        }\n        return newSorting;\n      });\n    };\n    column.getFirstSortDir = () => {\n      var _ref, _column$columnDef$sor;\n      const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n      return sortDescFirst ? 'desc' : 'asc';\n    };\n    column.getNextSortingOrder = multi => {\n      var _table$options$enable, _table$options$enable2;\n      const firstSortDirection = column.getFirstSortDir();\n      const isSorted = column.getIsSorted();\n      if (!isSorted) {\n        return firstSortDirection;\n      }\n      if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n      // If enableSortRemove, enable in general\n      multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false;\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc';\n    };\n    column.getCanSort = () => {\n      var _column$columnDef$ena, _table$options$enable3;\n      return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n    };\n    column.getCanMultiSort = () => {\n      var _ref2, _column$columnDef$ena2;\n      return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n    };\n    column.getIsSorted = () => {\n      var _table$getState$sorti;\n      const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n    };\n    column.getSortIndex = () => {\n      var _table$getState$sorti2, _table$getState$sorti3;\n      return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n    };\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n    };\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort();\n      return e => {\n        if (!canSort) return;\n        e.persist == null || e.persist();\n        column.toggleSorting == null || column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n      };\n    };\n  },\n  createTable: table => {\n    table.setSorting = updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);\n    table.resetSorting = defaultState => {\n      var _table$initialState$s, _table$initialState;\n      table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n    };\n    table.getPreSortedRowModel = () => table.getGroupedRowModel();\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table);\n      }\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel();\n      }\n      return table._getSortedRowModel();\n    };\n  }\n};\n\nconst builtInFeatures = [Headers, ColumnVisibility, ColumnOrdering, ColumnPinning, ColumnFaceting, ColumnFiltering, GlobalFaceting,\n//depends on ColumnFaceting\nGlobalFiltering,\n//depends on ColumnFiltering\nRowSorting, ColumnGrouping,\n//depends on RowSorting\nRowExpanding, RowPagination, RowPinning, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$_features, _options$initialState;\n  if (process.env.NODE_ENV !== 'production' && (options.debugAll || options.debugTable)) {\n    console.info('Creating Table Instance...');\n  }\n  const _features = [...builtInFeatures, ...((_options$_features = options._features) != null ? _options$_features : [])];\n  let table = {\n    _features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null || table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    //in next version, we should just pass in the row model as the optional 2nd arg\n    getRow: (id, searchAll) => {\n      let row = (searchAll ? table.getPrePaginationRowModel() : table.getRowModel()).rowsById[id];\n      if (!row) {\n        row = table.getCoreRowModel().rowsById[id];\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow could not find row with ID: ${id}`);\n          }\n          throw new Error();\n        }\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, getMemoOptions(options, 'debugColumns', 'getAllColumns')),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index];\n    feature == null || feature.createTable == null || feature.createTable(table);\n  }\n  return table;\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel'));\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return undefined;\n    const uniqueValues = facetedRowModel.flatRows.flatMap(flatRow => {\n      var _flatRow$getUniqueVal;\n      return (_flatRow$getUniqueVal = flatRow.getUniqueValues(columnId)) != null ? _flatRow$getUniqueVal : [];\n    }).map(Number).filter(value => !Number.isNaN(value));\n    if (!uniqueValues.length) return;\n    let facetedMinValue = uniqueValues[0];\n    let facetedMaxValue = uniqueValues[uniqueValues.length - 1];\n    for (const value of uniqueValues) {\n      if (value < facetedMinValue) facetedMinValue = value;else if (value > facetedMaxValue) facetedMaxValue = value;\n    }\n    return [facetedMinValue, facetedMaxValue];\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues'));\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel'));\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return new Map();\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, getMemoOptions(table.options, 'debugTable', `getFacetedUniqueValues_${columnId}`));\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = (columnFilters != null ? columnFilters : []).map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      rowModel.rows.forEach(row => {\n        row.depth = 0;\n        row.parentId = undefined;\n      });\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Perform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n        subRows.forEach(subRow => {\n          subRow.parentId = id;\n        });\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\n    table._queue(() => {\n      table._autoResetExpanded();\n      table._autoResetPageIndex();\n    });\n  }));\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel'));\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = rows.map(row => ({\n        ...row\n      }));\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const sortUndefined = columnInfo.sortUndefined;\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          let sortInt = 0;\n\n          // All sorting ints should always return in ascending order\n          if (sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = aValue === undefined;\n            const bUndefined = bValue === undefined;\n            if (aUndefined || bUndefined) {\n              if (sortUndefined === 'first') return aUndefined ? -1 : 1;\n              if (sortUndefined === 'last') return aUndefined ? 1 : -1;\n              sortInt = aUndefined && bUndefined ? 0 : aUndefined ? sortUndefined : -sortUndefined;\n            }\n          }\n          if (sortInt === 0) {\n            sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          }\n\n          // If sorting is non-zero, take care of desc and inversion\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () => table._autoResetPageIndex()));\n}\n\nexport { ColumnFaceting, ColumnFiltering, ColumnGrouping, ColumnOrdering, ColumnPinning, ColumnSizing, ColumnVisibility, GlobalFaceting, GlobalFiltering, Headers, RowExpanding, RowPagination, RowPinning, RowSelection, RowSorting, _getVisibleLeafColumns, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getMemoOptions, getPaginationRowModel, getSortedRowModel, isFunction, isNumberArray, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.mjs.map\n","/**\n   * react-table\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\nimport * as React from 'react';\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\n\n//\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\nfunction flexRender(Comp, props) {\n  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : Comp;\n}\nfunction isReactComponent(component) {\n  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n}\nfunction isClassComponent(component) {\n  return typeof component === 'function' && (() => {\n    const proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  })();\n}\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\nfunction useReactTable(options) {\n  // Compose in the generic options to the user options\n  const resolvedOptions = {\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    ...options\n  };\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable(resolvedOptions)\n  }));\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState);\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater);\n      options.onStateChange == null || options.onStateChange(updater);\n    }\n  }));\n  return tableRef.current;\n}\n\nexport { flexRender, useReactTable };\n//# sourceMappingURL=index.mjs.map\n","import React from 'react';\r\nimport {\r\n  flexRender,\r\n  getCoreRowModel,\r\n  useReactTable,\r\n  ColumnDef,\r\n  getSortedRowModel,\r\n  SortingState\r\n} from '@tanstack/react-table';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../../ui/table';\r\n\r\ninterface DataTableProps<T extends object> {\r\n  columns: ColumnDef<T, any>[]; // typed column defs\r\n  data: T[];\r\n  isLoading?: boolean;\r\n  emptyMessage?: string;\r\n}\r\n\r\nexport function DataTable<T extends object>({ columns, data, isLoading, emptyMessage = 'No data.' }: DataTableProps<T>) {\r\n  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    state: { sorting },\r\n    onSortingChange: setSorting,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel()\r\n  });\r\n\r\n  return (\r\n    <div className=\"rounded border bg-white\">\r\n      <Table>\r\n        <TableHeader>\r\n          {table.getHeaderGroups().map((hg) => (\r\n            <TableRow key={hg.id}>\r\n              {hg.headers.map((header) => (\r\n                <TableHead key={header.id} className=\"select-none cursor-pointer\" onClick={header.column.getToggleSortingHandler()} aria-sort={header.column.getIsSorted() ? (header.column.getIsSorted() === 'asc' ? 'ascending' : 'descending') : 'none'}>\r\n                  {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\r\n                  {header.column.getIsSorted() === 'asc' && ' ▲'}\r\n                  {header.column.getIsSorted() === 'desc' && ' ▼'}\r\n                </TableHead>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n        <TableBody>\r\n          {isLoading ? (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} className=\"p-6 text-center text-sm\">Loading…</TableCell>\r\n            </TableRow>\r\n          ) : data.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} className=\"p-6 text-center text-sm text-gray-500\">\r\n                {emptyMessage}\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Input } from '../../ui/input';\r\nimport { Button } from '../../ui/button';\r\n\r\ninterface DataTableToolbarProps {\r\n  value: string;\r\n  onChange: (v: string) => void;\r\n  onRefresh?: () => void;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport const DataTableToolbar: React.FC<DataTableToolbarProps> = ({ value, onChange, onRefresh, children }) => {\r\n  return (\r\n    <div className=\"flex items-center justify-between gap-2 py-2\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <Input\r\n          placeholder=\"Search...\"\r\n          value={value}\r\n          onChange={(e) => onChange(e.target.value)}\r\n          className=\"h-9 w-64\"\r\n          aria-label=\"Search\"\r\n        />\r\n      </div>\r\n      <div className=\"flex items-center gap-2\">\r\n        {children}\r\n        <Button variant=\"outline\" size=\"sm\" onClick={onRefresh} aria-label=\"Refresh table\">\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import { useEffect, useState } from 'react';\r\n\r\nexport function useDebounce<T>(value: T, delay = 500) {\r\n  const [debounced, setDebounced] = useState(value);\r\n  useEffect(() => {\r\n    const id = setTimeout(() => setDebounced(value), delay);\r\n    return () => clearTimeout(id);\r\n  }, [value, delay]);\r\n  return debounced;\r\n}","import React, { useState } from 'react';\r\nimport { PermanentEmployeeService } from '../../../services/api/permanentEmployees';\r\nimport { createPermanentEmployeeFS } from '../../../services/firestore/employees';\r\nconst USE_FS = import.meta.env.VITE_DATA_BACKEND === 'firestore';\r\nimport type { PermanentEmployee } from '../../../types/employee';\r\n\r\ninterface Props { onCreated?: (emp: PermanentEmployee) => void }\r\nexport const PermanentEmployeeForm: React.FC<Props> = ({ onCreated }) => {\r\n  const [form, setForm] = useState({ firstName:'', lastName:'', department:'', position:'', basic:0, housing:0, transport:0 });\r\n  const [saving, setSaving] = useState(false);\r\n  const submit = async () => {\r\n    setSaving(true);\r\n    const payload = {\r\n      personalInfo:{firstName:form.firstName,lastName:form.lastName,fatherName:'',dateOfBirth:'1990-01-01',placeOfBirth:'',nationality:'',religion:'',gender:'Male',maritalStatus:'Single',bloodGroup:'O+'},\r\n      documents:{qatarId:{number:'',issueDate:new Date().toISOString(),expiryDate:new Date().toISOString(),profession:'',sponsor:''},passport:{number:'',issueDate:new Date().toISOString(),expiryDate:new Date().toISOString(),issuePlace:''},visa:{number:'',issueDate:new Date().toISOString(),expiryDate:new Date().toISOString(),type:'Work',sponsor:'',occupation:''},healthCard:{number:'',issueDate:new Date().toISOString(),expiryDate:new Date().toISOString()},laborContract:{number:'',startDate:new Date().toISOString(),authenticated:false}},\r\n      employment:{position:form.position,department:form.department,joiningDate:new Date().toISOString(),contractType:'Unlimited',workLocation:'Doha'},\r\n      compensation:{basicSalary:form.basic,housingAllowance:form.housing,transportAllowance:form.transport,totalMonthlySalary:0,bankName:'',accountNumber:'',iban:''},\r\n      leave:{annualLeaveEntitlement:21,annualLeaveBalance:21,annualLeaveTaken:0,sickLeaveBalance:14,sickLeaveTaken:0,emergencyLeaveBalance:0,unpaidLeaveDays:0},\r\n      contact:{mobileQatar:'',address:'',emergencyContact:{name:'',relationship:'',phone:''}},\r\n      status:'Active',\r\n      endOfService:{eligible:false,serviceYears:0,gratuityAmount:0,exitPermitRequired:true}\r\n    } as const;\r\n    try {\r\n      const emp = USE_FS ? await createPermanentEmployeeFS(payload as any) : PermanentEmployeeService.create(payload as any);\r\n      onCreated?.(emp);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n  return <div className=\"space-y-3 p-4 border rounded\">\r\n    <h3 className=\"text-sm font-semibold\">New Permanent Employee</h3>\r\n    <div className=\"grid grid-cols-2 gap-2 text-xs\">\r\n      <label className=\"flex flex-col gap-1\">First Name<input className=\"border rounded px-2 py-1\" value={form.firstName} onChange={e=> setForm(f=>({...f,firstName:e.target.value}))}/></label>\r\n      <label className=\"flex flex-col gap-1\">Last Name<input className=\"border rounded px-2 py-1\" value={form.lastName} onChange={e=> setForm(f=>({...f,lastName:e.target.value}))}/></label>\r\n      <label className=\"flex flex-col gap-1 col-span-2\">Department<input className=\"border rounded px-2 py-1\" value={form.department} onChange={e=> setForm(f=>({...f,department:e.target.value}))}/></label>\r\n      <label className=\"flex flex-col gap-1 col-span-2\">Position<input className=\"border rounded px-2 py-1\" value={form.position} onChange={e=> setForm(f=>({...f,position:e.target.value}))}/></label>\r\n      <label className=\"flex flex-col gap-1\">Basic<input type=\"number\" className=\"border rounded px-2 py-1\" value={form.basic} onChange={e=> setForm(f=>({...f,basic:parseFloat(e.target.value)||0}))}/></label>\r\n      <label className=\"flex flex-col gap-1\">Housing<input type=\"number\" className=\"border rounded px-2 py-1\" value={form.housing} onChange={e=> setForm(f=>({...f,housing:parseFloat(e.target.value)||0}))}/></label>\r\n      <label className=\"flex flex-col gap-1\">Transport<input type=\"number\" className=\"border rounded px-2 py-1\" value={form.transport} onChange={e=> setForm(f=>({...f,transport:parseFloat(e.target.value)||0}))}/></label>\r\n    </div>\r\n    <button disabled={saving} onClick={submit} className=\"text-xs px-3 py-1 rounded bg-blue-600 text-white disabled:opacity-50\">{saving?'Saving...':'Create'}</button>\r\n  </div>;\r\n};\r\nexport default PermanentEmployeeForm;","import React, { useState } from 'react';\r\nimport { TemporaryEmployeeService } from '../../../services/api/temporaryEmployees';\r\nimport { createTemporaryEmployeeFS } from '../../../services/firestore/employees';\r\nconst USE_FS = import.meta.env.VITE_DATA_BACKEND === 'firestore';\r\nimport type { TemporaryEmployee } from '../../../types/employee';\r\n\r\ninterface Props { onCreated?: (emp: TemporaryEmployee) => void }\r\nexport const TemporaryEmployeeForm: React.FC<Props> = ({ onCreated }) => {\r\n  const [form, setForm] = useState({ firstName:'', lastName:'', client:'', position:'', rate:0, rateType:'Daily' as 'Daily'|'Hourly'|'Monthly' });\r\n  const [saving, setSaving] = useState(false);\r\n  const submit = async () => {\r\n    setSaving(true);\r\n    const payload = {\r\n      personalInfo:{firstName:form.firstName,lastName:form.lastName,fatherName:'',dateOfBirth:'1995-01-01',placeOfBirth:'',nationality:'',religion:'',gender:'Male',maritalStatus:'Single',bloodGroup:'O+'},\r\n      documents:{passport:{number:'',issueDate:new Date().toISOString(),expiryDate:new Date().toISOString(),issuePlace:''}},\r\n      contract:{contractNumber:'',startDate:new Date().toISOString(),endDate:new Date(Date.now()+86400000*30).toISOString(),client:form.client,clientLocation:'',position:form.position,workType:'Daily Wage'},\r\n      compensation:{rateType:form.rateType,rate:form.rate,transportProvided:true,accommodationProvided:true},\r\n      attendance:{totalDaysWorked:0},\r\n      payment:{paymentMethod:'Cash'},\r\n      contact:{mobileQatar:'',address:'',emergencyContact:{name:'',relationship:'',phone:''}},\r\n      status:'Active'\r\n    } as const;\r\n    try {\r\n      const emp = USE_FS ? await createTemporaryEmployeeFS(payload as any) : TemporaryEmployeeService.create(payload as any);\r\n      onCreated?.(emp);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n  return <div className=\"space-y-3 p-4 border rounded\">\r\n    <h3 className=\"text-sm font-semibold\">New Temporary Employee</h3>\r\n    <div className=\"grid grid-cols-2 gap-2 text-xs\">\r\n      <label className=\"flex flex-col gap-1\">First Name<input className=\"border rounded px-2 py-1\" value={form.firstName} onChange={e=> setForm(f=>({...f,firstName:e.target.value}))}/></label>\r\n      <label className=\"flex flex-col gap-1\">Last Name<input className=\"border rounded px-2 py-1\" value={form.lastName} onChange={e=> setForm(f=>({...f,lastName:e.target.value}))}/></label>\r\n      <label className=\"flex flex-col gap-1 col-span-2\">Client<input className=\"border rounded px-2 py-1\" value={form.client} onChange={e=> setForm(f=>({...f,client:e.target.value}))}/></label>\r\n      <label className=\"flex flex-col gap-1 col-span-2\">Position<input className=\"border rounded px-2 py-1\" value={form.position} onChange={e=> setForm(f=>({...f,position:e.target.value}))}/></label>\r\n      <label className=\"flex flex-col gap-1\">Rate<input type=\"number\" className=\"border rounded px-2 py-1\" value={form.rate} onChange={e=> setForm(f=>({...f,rate:parseFloat(e.target.value)||0}))}/></label>\r\n      <label className=\"flex flex-col gap-1\">Rate Type<select className=\"border rounded px-2 py-1\" value={form.rateType} onChange={e=> setForm(f=>({...f,rateType:e.target.value as any}))}><option>Daily</option><option>Hourly</option><option>Monthly</option></select></label>\r\n    </div>\r\n    <button disabled={saving} onClick={submit} className=\"text-xs px-3 py-1 rounded bg-blue-600 text-white disabled:opacity-50\">{saving?'Saving...':'Create'}</button>\r\n  </div>;\r\n};\r\nexport default TemporaryEmployeeForm;","import React from 'react';\r\nimport { ColumnDef } from '@tanstack/react-table';\r\nimport { Employee } from '../../../types/employee';\r\nimport { DataTable } from '../../common/DataTable';\r\nimport { Badge } from '../../ui/badge';\r\nimport { useEmployees } from '../../../hooks/useEmployees';\r\nimport { DataTableToolbar } from '../../common/DataTable';\r\nimport { formatCurrency } from '../../../lib/formatters';\r\nimport { useDebounce } from '../../../hooks/useDebounce';\r\nimport { useNotificationStore } from '../../../stores/notificationStore';\r\nimport { Dialog } from '../../ui/dialog';\r\nimport { PermanentEmployeeForm } from './PermanentEmployeeForm';\r\nimport { TemporaryEmployeeForm } from './TemporaryEmployeeForm';\r\nimport { EmployeeDetails } from './EmployeeDetails';\r\n// Creation/Update disabled in compatibility phase – forms will be reintroduced per employee type\r\n// import { useCreateEmployee, useUpdateEmployee } from '../../../hooks/useEmployeeMutations';\r\nimport { Button } from '../../ui/button';\r\nimport { EmployeeService } from '../../../services/api/employees';\r\n\r\nexport const EmployeeTable: React.FC = () => {\r\n  const push = useNotificationStore((s) => s.push);\r\n  const [search, setSearch] = React.useState('');\r\n  const debounced = useDebounce(search, 400);\r\n\r\n  const [page, setPage] = React.useState(1);\r\n  const pageSize = 20;\r\n  const { data, isLoading, refetch, error } = useEmployees({ search: debounced || undefined, page, pageSize });\r\n  const [openDetails, setOpenDetails] = React.useState(false);\r\n  const [selected, setSelected] = React.useState<Employee | null>(null);\r\n  // const createMutation = useCreateEmployee();\r\n  // const updateMutation = useUpdateEmployee(editing?.id);\r\n\r\n  const [showAddPerm, setShowAddPerm] = React.useState(false);\r\n  const [showAddTemp, setShowAddTemp] = React.useState(false);\r\n  const openCreatePermanent = () => setShowAddPerm(true);\r\n  const openCreateTemporary = () => setShowAddTemp(true);\r\n\r\n  const onNameClick = (emp: Employee) => {\r\n    setSelected(emp);\r\n    setOpenDetails(true);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      push({ title: 'Employee Fetch Failed', message: error.message, type: 'error' });\r\n    }\r\n  }, [error, push]);\r\n\r\n  const columns = React.useMemo<ColumnDef<Employee>[]>(\r\n    () => [\r\n      {\r\n        accessorKey: 'employeeCode',\r\n        header: 'Code',\r\n        cell: ({ row }) => <span className=\"font-medium\">{row.original.employeeCode}</span>\r\n      },\r\n      {\r\n        id: 'name',\r\n        header: 'Name',\r\n        cell: ({ row }) => {\r\n          const emp = row.original;\r\n          const position = emp.employeeType==='Permanent' ? emp.employment.position : emp.contract.position;\r\n          const fullName = `${emp.personalInfo.firstName} ${emp.personalInfo.lastName}`;\r\n          return (\r\n            <div>\r\n              <button className=\"text-indigo-600 hover:underline font-medium\" onClick={() => onNameClick(emp)} title=\"View details\">\r\n                {fullName}\r\n              </button>\r\n              <div className=\"text-xs text-gray-500\">{position}</div>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        id: 'deptOrClient',\r\n        header: 'Dept/Client',\r\n        cell: ({ row }) => {\r\n          const emp = row.original;\r\n          if (emp.employeeType==='Permanent') {\r\n            return <Badge variant=\"secondary\">{emp.employment.department}</Badge>;\r\n          }\r\n            return <Badge variant=\"outline\">{emp.contract.client}</Badge>;\r\n        }\r\n      },\r\n      {\r\n        id: 'baseOrRate',\r\n        header: 'Base / Rate',\r\n        cell: ({ row }) => {\r\n          const emp = row.original;\r\n          if (emp.employeeType==='Permanent') {\r\n            return formatCurrency(emp.compensation.basicSalary);\r\n          }\r\n          return `${emp.compensation.rateType} ${formatCurrency(emp.compensation.rate)}`;\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'status',\r\n        header: 'Status',\r\n        cell: ({ row }) => (\r\n          <Badge\r\n            variant={\r\n              row.original.status === 'Active'\r\n                ? 'default'\r\n                : row.original.status === 'On Leave'\r\n                ? 'secondary'\r\n                : 'destructive'\r\n            }\r\n          >\r\n            {row.original.status}\r\n          </Badge>\r\n        )\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <DataTableToolbar value={search} onChange={(v) => { setSearch(v); setPage(1); }} onRefresh={() => refetch()}>\r\n        <div className=\"flex gap-2\">\r\n          <Button size=\"sm\" variant=\"outline\" onClick={openCreatePermanent}>Add Permanent</Button>\r\n          <Button size=\"sm\" variant=\"outline\" onClick={openCreateTemporary}>Add Temporary</Button>\r\n        </div>\r\n      </DataTableToolbar>\r\n      <DataTable<Employee>\r\n        columns={columns}\r\n        data={(data?.employees ?? []).map((e) => ({ ...e }))}\r\n        isLoading={isLoading}\r\n        emptyMessage={debounced ? 'No employees match your search.' : 'No employees yet.'}\r\n      />\r\n      {data && (\r\n        <div className=\"flex items-center justify-between text-xs text-gray-500 pt-1\">\r\n          <p>Showing {data.employees.length} of {data.count} employees</p>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button variant=\"outline\" size=\"sm\" disabled={page === 1 || isLoading} onClick={() => setPage(p => Math.max(1, p - 1))}>Prev</Button>\r\n            <span>Page {page}{data.count > pageSize ? ` / ${Math.max(1, Math.ceil(data.count / pageSize))}` : ''}</span>\r\n            <Button variant=\"outline\" size=\"sm\" disabled={isLoading || (data.count <= page * pageSize)} onClick={() => setPage(p => p + 1)}>Next</Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n  <Dialog open={showAddPerm} onClose={()=> setShowAddPerm(false)} title=\"Add Permanent Employee\" size=\"lg\">\r\n    <PermanentEmployeeForm onCreated={()=> { setShowAddPerm(false); refetch(); }} />\r\n  </Dialog>\r\n  <Dialog open={showAddTemp} onClose={()=> setShowAddTemp(false)} title=\"Add Temporary Employee\" size=\"lg\">\r\n    <TemporaryEmployeeForm onCreated={()=> { setShowAddTemp(false); refetch(); }} />\r\n  </Dialog>\r\n  <Dialog open={openDetails} onClose={()=> setOpenDetails(false)} title={selected ? `${selected.personalInfo.firstName} ${selected.personalInfo.lastName}` : 'Employee Details'} size=\"lg\">\r\n    {selected && (<EmployeeDetails employee={selected} />)}\r\n  </Dialog>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { EmployeeTable } from '../../components/features/employees/EmployeeTable';\r\n\r\nexport const EmployeeListPage: React.FC = () => (\r\n  <div className=\"p-6 space-y-6\">\r\n    <div className=\"space-y-1\">\r\n      <h1 className=\"text-2xl font-semibold\">Employees</h1>\r\n      <p className=\"text-sm text-gray-600\">Manage and monitor all active personnel.</p>\r\n    </div>\r\n    <EmployeeTable />\r\n  </div>\r\n);"],"names":["__memoryStore","safeStorage","key","_a","value","PermanentEmployeeService","stored","data","employees","newEmployee","e","c","joiningDate","start","diffYears","employee","years","basic","g","firstFive","year","raw","existing","count","list","enriched","s","__publicField","functionalUpdate","updater","input","makeStateUpdater","instance","old","isFunction","d","isNumberArray","val","flattenBy","arr","getChildren","flat","recurse","subArr","item","children","memo","getDeps","fn","opts","deps","result","depArgs","depTime","newDeps","dep","index","resultTime","depEndTime","resultEndTime","resultFpsPercentage","pad","str","num","getMemoOptions","tableOptions","debugLevel","onChange","_tableOptions$debugAl","createCell","table","row","column","columnId","getRenderValue","_cell$getValue","cell","feature","createColumn","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","accessorKey","id","accessorFn","originalRow","_result","_column$columns","orderColumns","_column$columns2","leafColumns","debug","createHeader","options","_options$id","header","leafHeaders","recurseHeader","h","Headers","allColumns","left","right","_left$map$filter","_right$map$filter","leftColumns","rightColumns","centerColumns","buildHeaderGroups","_left$map$filter2","orderedLeafColumns","_right$map$filter2","headerGroups","headerGroup","flatHeaders","_header$subHeaders","_header$subHeaders2","_header$subHeaders3","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","columns","createHeaderGroup","headersToGroup","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","isPlaceholder","bottomHeaders","recurseHeadersForSpans","headers","colSpan","rowSpan","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","createRow","original","rowIndex","subRows","parentId","_row$getValue","parentRows","currentRow","parentRow","allCells","acc","i","ColumnFaceting","includesString","filterValue","_filterValue$toString","search","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","min","max","rowValue","unsafeMin","unsafeMax","parsedMin","parsedMax","temp","filterFns","ColumnFiltering","state","firstRow","_table$options$filter","_table$options$filter2","_column$columnDef$ena","_table$options$enable","_table$options$enable2","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","filterFn","previousFilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_table","updateFn","_functionalUpdate","filter","defaultState","_table$initialState$c","_table$initialState","sum","_leafRows","childRows","next","nextValue","extent","mean","leafRows","median","values","mid","nums","a","b","unique","uniqueCount","_columnId","aggregationFns","ColumnGrouping","props","_toString","_props$getValue","_table$getState$group","_table$getState$group2","canGroup","_table$options$aggreg","_table$options$aggreg2","_table$initialState$g","_row$subRows","grouping","groupedColumnMode","nonGroupingColumns","col","ColumnOrdering","position","_getVisibleLeafColumns","_columns$","_columns","columnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","foundIndex","getDefaultColumnPinningState","ColumnPinning","columnIds","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","_d$columnDef$enablePi","leafColumnIds","isLeft","isRight","leftAndRight","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","safelyAccessDocument","_document","defaultColumnSizing","getDefaultColumnSizingInfoState","ColumnSizing","_column$columnDef$min","_column$columnDef$max","columnSize","_ref2","_","rest","_header$column$getSiz","prevSiblingHeader","_contextDocument","canResize","isTouchStartEvent","startSize","columnSizingStart","clientX","newColumnSizing","updateOffset","eventType","clientXPos","_old$startOffset","_old$startSize","deltaDirection","deltaOffset","deltaPercentage","_ref3","headerSize","onMove","onEnd","contextDocument","mouseEvents","touchEvents","_e$touches$","passiveIfSupported","passiveEventSupported","_table$initialState$c2","_table$getHeaderGroup","_table$getHeaderGroup2","_table$getLeftHeaderG","_table$getLeftHeaderG2","_table$getCenterHeade","_table$getCenterHeade2","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","ColumnVisibility","childColumns","cells","makeVisibleColumnsMethod","getColumns","_value","obj","_target","GlobalFaceting","GlobalFiltering","_table$getCoreRowMode","_table$options$getCol","globalFilterFn","RowExpanding","registered","queued","_table$options$autoRe","expanded","_table$initialState$e","splitId","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","_table$options$getRow","isFullyExpanded","canExpand","defaultPageIndex","defaultPageSize","getDefaultPaginationState","RowPagination","safeUpdater","_table$initialState$p","pageIndex","maxPageIndex","_table$initialState$p2","_table$initialState$p3","_table$initialState2","pageSize","topRowIndex","_table$options$pageCo","newPageCount","pageCount","pageOptions","_table$options$pageCo2","_table$options$rowCou","getDefaultRowPinningState","RowPinning","includeLeafRows","includeParentRows","leafRowIds","parentRowIds","rowIds","_old$top3","_old$bottom3","_old$top","_old$bottom","_old$top2","_old$bottom2","enableRowPinning","enablePinning","top","bottom","isTop","isBottom","_ref4","_visiblePinnedRowIds$","visiblePinnedRowIds","_ref5","_table$initialState$r","_pinningState$top","_pinningState$bottom","visibleRows","pinnedRowIds","_table$options$keepPi","allRows","topPinnedRowIds","bottomPinnedRowIds","topAndBottom","RowSelection","rowSelection","preGroupedFlatRows","resolvedValue","mutateRowIsSelected","rowModel","selectRowsFn","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","_table$getState$rowSe","totalSelected","isSelected","_opts$selectChildren","selectedRowIds","isRowSelected","isSubRowSelected","_table$options$enable3","canSelect","includeChildren","newSelectedFlatRows","newSelectedRowsById","recurseRows","rows","_row$subRows2","selection","_selection$row$id","_row$subRows3","allChildrenSelected","someSelected","subRow","subRowChildrenSelected","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","toString","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","aStr","bStr","aa","bb","an","bn","combo","sortingFns","RowSorting","firstRows","isString","_table$options$sortin","_table$options$sortin2","desc","multi","nextSortingOrder","hasManualValue","existingSorting","existingIndex","newSorting","sortAction","nextDesc","_table$options$maxMul","_column$columnDef$sor","firstSortDirection","isSorted","_column$columnDef$ena2","_table$getState$sorti","columnSort","_table$getState$sorti2","_table$getState$sorti3","canSort","_table$initialState$s","builtInFeatures","createTable","_options$_features","_options$initialState","_features","defaultOptions","mergeOptions","initialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","error","newOptions","searchAll","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","columnDefs","recurseColumns","groupingColumnDef","flatColumns","getCoreRowModel","accessRows","originalRows","_row$originalSubRows","getSortedRowModel","sorting","sortingState","sortedFlatRows","availableSorting","sort","_table$getColumn","columnInfoById","sortEntry","sortData","sortedData","_sortEntry$desc","columnInfo","sortUndefined","isDesc","sortInt","aValue","bValue","aUndefined","bUndefined","flexRender","Comp","isReactComponent","React.createElement","component","isClassComponent","isExoticComponent","proto","useReactTable","resolvedOptions","tableRef","React.useState","setState","prev","DataTable","isLoading","emptyMessage","setSorting","React","jsx","Table","TableHeader","hg","TableRow","TableHead","TableBody","TableCell","DataTableToolbar","onRefresh","jsxs","Input","Button","useDebounce","delay","debounced","setDebounced","useState","useEffect","USE_FS","PermanentEmployeeForm","onCreated","form","setForm","saving","setSaving","submit","payload","emp","createPermanentEmployeeFS","f","TemporaryEmployeeForm","createTemporaryEmployeeFS","TemporaryEmployeeService","EmployeeTable","push","useNotificationStore","setSearch","page","setPage","refetch","useEmployees","openDetails","setOpenDetails","selected","setSelected","showAddPerm","setShowAddPerm","showAddTemp","setShowAddTemp","openCreatePermanent","openCreateTemporary","onNameClick","fullName","Badge","formatCurrency","v","p","Dialog","EmployeeDetails","EmployeeListPage"],"mappings":"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","x_google_ignoreList":[1,2]}