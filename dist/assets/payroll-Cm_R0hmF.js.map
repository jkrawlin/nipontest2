{"version":3,"file":"payroll-Cm_R0hmF.js","sources":["../../src/services/api/payroll.ts"],"sourcesContent":["import { Decimal } from 'decimal.js';\r\nimport type { PayrollBatch, SalaryCalculation, PayrollAttendanceEntry, PayrollAdjustment } from '../../types/payroll';\r\n\r\nconst LS_KEY = 'payroll_batches';\r\n\r\nlet _BATCHES: PayrollBatch[] = [];\r\nlet _loaded = false;\r\n\r\nfunction load() {\r\n  if (_loaded) return;\r\n  try {\r\n    const raw = localStorage.getItem(LS_KEY);\r\n    if (raw) {\r\n      const parsed: any[] = JSON.parse(raw);\r\n      _BATCHES = parsed.map(p => ({\r\n        ...p,\r\n        totalAmount: new Decimal(p.totalAmount),\r\n      }));\r\n    }\r\n  } catch {}\r\n  _loaded = true;\r\n}\r\n\r\nfunction persist() {\r\n  try {\r\n    localStorage.setItem(LS_KEY, JSON.stringify(_BATCHES.map(b => ({ ...b, totalAmount: b.totalAmount.toString() }))));\r\n  } catch {}\r\n}\r\n\r\nfunction generateId(month: number, year: number) {\r\n  return `PB-${year}-${String(month).padStart(2, '0')}-${Date.now().toString(36)}`;\r\n}\r\n\r\nexport const PayrollService = {\r\n  list(): PayrollBatch[] { load(); return [..._BATCHES]; },\r\n\r\n  getById(id: string): PayrollBatch | undefined { load(); return _BATCHES.find(b => b.id === id); },\r\n\r\n  getDraft(month: number, year: number): PayrollBatch | undefined {\r\n    load();\r\n    return _BATCHES.find(b => b.month === month && b.year === year && b.status === 'draft');\r\n  },\r\n\r\n  createDraft(month: number, year: number): PayrollBatch {\r\n    load();\r\n    const existing = this.getDraft(month, year);\r\n    if (existing) return existing;\r\n    const batch: PayrollBatch = {\r\n      id: generateId(month, year),\r\n      month,\r\n      year,\r\n      employees: [],\r\n      attendance: {},\r\n      calculations: [],\r\n      totalAmount: new Decimal(0),\r\n      status: 'draft',\r\n      calculationMode: 'Permanent',\r\n      overtimeConfig: { regular: 1.25, weekend: 1.5, holiday: 2 },\r\n      attendanceImportAudit: []\r\n    };\r\n    _BATCHES.push(batch);\r\n    persist();\r\n    return batch;\r\n  },\r\n\r\n  upsert(batch: PayrollBatch) {\r\n    load();\r\n    const idx = _BATCHES.findIndex(b => b.id === batch.id);\r\n    if (idx >= 0) _BATCHES[idx] = batch; else _BATCHES.push(batch);\r\n    persist();\r\n    return batch;\r\n  },\r\n\r\n  updateAttendance(batchId: string, attendance: Record<string, PayrollAttendanceEntry>) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    batch.attendance = attendance;\r\n    this.upsert(batch);\r\n    return batch;\r\n  },\r\n\r\n  updateCalculations(batchId: string, calculations: SalaryCalculation[]) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    batch.calculations = calculations;\r\n    batch.totalAmount = new Decimal(calculations.reduce((s, c) => s + c.net, 0));\r\n    this.upsert(batch);\r\n    return batch;\r\n  },\r\n  updateCalculationMode(batchId: string, mode: 'Permanent' | 'Temporary' | 'All') {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    batch.calculationMode = mode;\r\n    this.upsert(batch);\r\n    return batch;\r\n  },\r\n  updateOvertimeConfig(batchId: string, cfg: Partial<{ regular: number; weekend: number; holiday: number }>) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    batch.overtimeConfig = { ...(batch.overtimeConfig || { regular:1.25, weekend:1.5, holiday:2 }), ...cfg };\r\n    this.upsert(batch);\r\n    return batch.overtimeConfig;\r\n  },\r\n  addAttendanceImportAudit(batchId: string, entry: { fileName?: string; updated: number; invalid: number; warnings: number; }) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    batch.attendanceImportAudit = batch.attendanceImportAudit || [];\r\n    batch.attendanceImportAudit.push({ id: crypto.randomUUID(), at: new Date().toISOString(), ...entry });\r\n    this.upsert(batch);\r\n    return batch.attendanceImportAudit[batch.attendanceImportAudit.length - 1];\r\n  },\r\n  computeVersionHash(batchId: string) {\r\n    // Lightweight deterministic hash: JSON stable stringify of relevant batch slices.\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    const payload = {\r\n      month: batch.month,\r\n      year: batch.year,\r\n      calculations: (batch.calculations||[]).map(c => ({\r\n        employeeId: c.employeeId,\r\n        basic: c.basic,\r\n        housing: c.housing,\r\n        transport: c.transport,\r\n        other: c.other,\r\n        overtime: c.overtime,\r\n        deductions: c.deductions,\r\n        baseNet: c.baseNet ?? c.net - (c.adjustmentsTotal||0)\r\n      })),\r\n      adjustments: (batch.adjustments||[]).map(a => ({ id: a.id, employeeId: a.employeeId, type: a.type, amount: a.amount, reason: a.reason }))\r\n    };\r\n    const json = JSON.stringify(payload);\r\n    // Simple FNV-1a hash for speed\r\n    let hash = 2166136261;\r\n    for (let i=0; i<json.length; i++) {\r\n      hash ^= json.charCodeAt(i);\r\n      hash = (hash * 16777619) >>> 0;\r\n    }\r\n    return hash.toString(16);\r\n  },\r\n\r\n  addAdjustment(batchId: string, adj: Omit<PayrollAdjustment, 'id' | 'appliedAt'>) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    const full: PayrollAdjustment = { ...adj, id: crypto.randomUUID(), appliedAt: new Date() };\r\n    batch.adjustments = batch.adjustments || [];\r\n    batch.adjustments.push(full);\r\n    batch.adjustmentAudit = batch.adjustmentAudit || [];\r\n    batch.adjustmentAudit.push({ action: 'add', adjustmentId: full.id, at: new Date().toISOString(), details: { type: full.type, amount: full.amount } });\r\n    // Recompute per-employee net values\r\n    if (batch.calculations) {\r\n      const map = new Map(batch.calculations.map(c => [c.employeeId, c]));\r\n      batch.calculations.forEach(c => { if (c.baseNet == null) c.baseNet = c.net; c.adjustmentsTotal = 0; });\r\n      batch.adjustments.forEach(a => {\r\n        const calc = map.get(a.employeeId);\r\n        if (!calc) return;\r\n        const delta = a.type === 'deduction' ? -a.amount : a.amount; // allowance/bonus/overtime all positive\r\n        calc.adjustmentsTotal = (calc.adjustmentsTotal || 0) + delta;\r\n        if (calc.baseNet == null) calc.baseNet = calc.net; // capture baseline once\r\n        calc.net = (calc.baseNet) + (calc.adjustmentsTotal || 0);\r\n      });\r\n      batch.totalAmount = new Decimal(batch.calculations.reduce((s, c) => s + c.net, 0));\r\n    }\r\n    this.upsert(batch);\r\n    return full;\r\n  },\r\n\r\n  removeAdjustment(batchId: string, adjustmentId: string) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch || !batch.adjustments) return;\r\n    batch.adjustments = batch.adjustments.filter(a => a.id !== adjustmentId);\r\n    batch.adjustmentAudit = batch.adjustmentAudit || [];\r\n    batch.adjustmentAudit.push({ action: 'remove', adjustmentId, at: new Date().toISOString() });\r\n    if (batch.calculations) {\r\n      batch.calculations.forEach(c => { if (c.baseNet != null) c.net = c.baseNet; c.adjustmentsTotal = 0; });\r\n      batch.adjustments.forEach(a => {\r\n        const calc = batch.calculations!.find(c => c.employeeId === a.employeeId);\r\n        if (!calc) return;\r\n        const delta = a.type === 'deduction' ? -a.amount : a.amount;\r\n        calc.adjustmentsTotal = (calc.adjustmentsTotal || 0) + delta;\r\n        if (calc.baseNet == null) calc.baseNet = calc.net;\r\n        calc.net = (calc.baseNet) + (calc.adjustmentsTotal || 0);\r\n      });\r\n      batch.totalAmount = new Decimal(batch.calculations.reduce((s, c) => s + c.net, 0));\r\n    }\r\n    this.upsert(batch);\r\n  },\r\n\r\n  editAdjustment(batchId: string, adjustmentId: string, changes: Partial<Pick<PayrollAdjustment, 'amount' | 'reason' | 'type'>>) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch || !batch.adjustments) throw new Error('Batch not found');\r\n    const adj = batch.adjustments.find(a => a.id === adjustmentId);\r\n    if (!adj) throw new Error('Adjustment not found');\r\n    Object.assign(adj, changes, { editedAt: new Date() });\r\n    batch.adjustmentAudit = batch.adjustmentAudit || [];\r\n    batch.adjustmentAudit.push({ action: 'edit', adjustmentId, at: new Date().toISOString(), details: changes });\r\n    // Recompute nets similar to add/remove\r\n    if (batch.calculations) {\r\n      batch.calculations.forEach(c => { if (c.baseNet != null) c.net = c.baseNet; c.adjustmentsTotal = 0; });\r\n      batch.adjustments.forEach(a => {\r\n        const calc = batch.calculations!.find(c => c.employeeId === a.employeeId);\r\n        if (!calc) return;\r\n        const delta = a.type === 'deduction' ? -a.amount : a.amount;\r\n        calc.adjustmentsTotal = (calc.adjustmentsTotal || 0) + delta;\r\n        if (calc.baseNet == null) calc.baseNet = calc.net;\r\n        calc.net = (calc.baseNet) + (calc.adjustmentsTotal || 0);\r\n      });\r\n      batch.totalAmount = new Decimal(batch.calculations.reduce((s, c) => s + c.net, 0));\r\n    }\r\n    this.upsert(batch);\r\n  },\r\n\r\n  approve(batchId: string) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    batch.status = 'approved';\r\n    this.upsert(batch);\r\n    return batch;\r\n  },\r\n\r\n  markProcessed(batchId: string) {\r\n    load();\r\n    const batch = this.getById(batchId);\r\n    if (!batch) throw new Error('Batch not found');\r\n    batch.status = 'processed';\r\n    this.upsert(batch);\r\n    return batch;\r\n  }\r\n};\r\n\r\nexport type { PayrollBatch };"],"names":["LS_KEY","_BATCHES","_loaded","load","raw","p","Decimal","persist","b","generateId","month","year","PayrollService","id","existing","batch","idx","batchId","attendance","calculations","s","c","mode","cfg","entry","payload","a","json","hash","i","adj","full","map","calc","delta","adjustmentId","changes"],"mappings":"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"}